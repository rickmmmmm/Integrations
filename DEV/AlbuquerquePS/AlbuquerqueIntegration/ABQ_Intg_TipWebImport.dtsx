<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/22/2014 2:43:54 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="MSANTOS_DEV"
  DTS:CreatorName="HAYESSOFT\mkallen"
  DTS:DTSID="{8CE7F2D4-D641-4DAB-9281-DCDC6E4B3D27}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.0800.90"
  DTS:LocaleID="1033"
  DTS:ObjectName="ABQ_Intg_TipWebImport"
  DTS:PackageType="5"
  DTS:VersionBuild="171"
  DTS:VersionGUID="{9751F739-05BB-4CC4-B36D-FDEA51A56581}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
      DTS:ObjectName="DBConn">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[User::dataDepotDatabase]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[User::dataDepotServer]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CS-NBLAKELY\MSSQLSERVER2014;Initial Catalog=TipWeb_Albuquerque_0620;Provider=SQLNCLI11.1;Integrated Security=SSPI;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{20F33CD2-278F-463E-BB2D-470F50134A2E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::ClientDB]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dataDepotDatabase">
      <DTS:VariableValue
        DTS:DataType="8">TipWeb_Albuquerque_0620</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F85A87C2-8E9F-42DA-BD81-5D6929E95C78}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::Server]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dataDepotServer">
      <DTS:VariableValue
        DTS:DataType="8">CS-NBLAKELY\MSSQLSERVER2014</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\00 - Initial Setup - Opt 4, 19, &amp; 20"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{A6BF2436-C90C-4521-964B-8C526671570D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="00 - Initial Setup - Opt 4, 19, &amp; 20"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="-- verify that there is a default room in the table (for every site)&#xA;DECLARE @DEFAULT_ROOM VARCHAR(50)&#xA;DECLARE @ROOMTYPEUID INT&#xA;&#xA;SET @DEFAULT_ROOM = (SELECT ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 4)&#xA;&#xA;IF (SELECT COUNT(*) FROM tblUnvRoomTypes WHERE RoomTypeName = @DEFAULT_ROOM) = 0&#xA;&#x9;INSERT INTO tblUnvRoomTypes (RoomTypeName, RoomTypeDescription,&#xA;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;SELECT @DEFAULT_ROOM, @DEFAULT_ROOM, 0, GETDATE(), 0, GETDATE()&#xA;&#xA;SET @ROOMTYPEUID = (SELECT RoomTypeUID FROM tblUnvRoomTypes WHERE RoomTypeName = @DEFAULT_ROOM)&#xA;&#xA;INSERT INTO tblUnvRooms (RoomNumber, RoomDescription, RoomTypeUID, RoomNotes, SiteUID, Active,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT @DEFAULT_ROOM, @DEFAULT_ROOM, @ROOMTYPEUID, 'Default Room for Imported Inventory',&#xA;Sites.SiteUID, 1, 0, GETDATE(), 0, GETDATE()&#xA;FROM tblTechSites AS Sites&#xA;LEFT JOIN tblUnvRooms AS Rooms ON Sites.SiteUID = Rooms.SiteUID&#xA;AND Rooms.RoomNumber = @DEFAULT_ROOM&#xA;WHERE Rooms.RoomUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 19 AND ETLSettingValue = 'True') = 1&#xA;&#x9;INSERT INTO _ETL_Items (ProductName, Model, Manufacturer, Area)&#x9;&#xA;&#x9;SELECT Purchases.Product, Purchases.Model, Purchases.Manufacturer, Purchases.Area&#xA;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;LEFT JOIN _ETL_Items AS Items&#xA;&#x9;ON UPPER(ISNULL(Purchases.Product, '')) = UPPER(ISNULL(Items.ProductName, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Model, '')) = UPPER(ISNULL(Items.Model, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Manufacturer, '')) = UPPER(ISNULL(Items.Manufacturer, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Area, '')) = UPPER(ISNULL(Items.Area, ''))&#xA;&#x9;WHERE Items.ETLItemUID IS NULL&#xA;&#x9;GROUP BY Purchases.Product, Purchases.Model, Purchases.Manufacturer, Purchases.Area&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 20 AND ETLSettingValue = 'True') = 1&#xA;&#x9;INSERT INTO _ETL_Items (ProductName, Model, Manufacturer, Area)&#xA;&#x9;SELECT Inventory.Product, Inventory.Model, Inventory.Manufacturer, Inventory.Area&#xA;&#x9;FROM _ETL_Inventory AS Inventory&#xA;&#x9;LEFT JOIN _ETL_Items AS Items&#xA;&#x9;ON UPPER(ISNULL(Inventory.Product, '')) = UPPER(ISNULL(Items.ProductName, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Model, '')) = UPPER(ISNULL(Items.Model, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Manufacturer, '')) = UPPER(ISNULL(Items.Manufacturer, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Area, '')) = UPPER(ISNULL(Items.Area, ''))&#xA;&#x9;WHERE Items.ETLItemUID IS NULL&#xA;&#x9;GROUP BY Inventory.Product, Inventory.Model, Inventory.Manufacturer, Inventory.Area&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\01 - INSERT TW Manufacturers"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{13DAE04D-ED77-42D9-A40D-3966B55ACBD3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="01 - INSERT TW Manufacturers"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblUnvManufacturers WHERE ManufacturerUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvManufacturers ON &#xA;&#x9;&#x9;INSERT INTO tblUnvManufacturers (ManufacturerUID, ManufacturerName,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvManufacturers OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblUnvManufacturers (ManufacturerName,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.Manufacturer, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblUnvManufacturers ON UPPER(Items.Manufacturer) = UPPER(tblUnvManufacturers.ManufacturerName)&#xA;WHERE Items.Manufacturer IS NOT NULL AND Items.Manufacturer &lt;&gt; ''&#xA;AND Items.Manufacturer &lt;&gt; 'N/A' AND Items.Manufacturer &lt;&gt; 'NONE' AND Items.Manufacturer &lt;&gt; 'UNKNOWN'&#xA;AND tblUnvManufacturers.ManufacturerUID IS NULL&#xA;GROUP BY Items.Manufacturer&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ManufacturerUID = tblUnvManufacturers.ManufacturerUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblUnvManufacturers ON UPPER(Items.Manufacturer) = UPPER(tblUnvManufacturers.ManufacturerName)&#xA;WHERE Items.Manufacturer IS NOT NULL AND Items.Manufacturer &lt;&gt; ''&#xA;AND Items.Manufacturer &lt;&gt; 'N/A' AND Items.Manufacturer &lt;&gt; 'NONE' AND Items.Manufacturer &lt;&gt; 'UNKNOWN'&#xA;AND (Items.ManufacturerUID IS NULL&#xA;OR Items.ManufacturerUID &lt;&gt; tblUnvManufacturers.ManufacturerUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ManufacturerUID = 0&#xA;WHERE ManufacturerUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\02 - INSERT TW Areas"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{6DB00D12-C3A7-4B4F-B6BF-0FA44BB47EA4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="02 - INSERT TW Areas"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblUnvAreas WHERE AreaUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvAreas ON &#xA;&#x9;&#x9;INSERT INTO tblUnvAreas (AreaUID, AreaName,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvAreas OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblUnvAreas (AreaName,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.Area, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblUnvAreas ON UPPER(Items.Area) = UPPER(tblUnvAreas.AreaName)&#xA;WHERE Items.Area IS NOT NULL AND Items.Area &lt;&gt; ''&#xA;AND Items.Area &lt;&gt; 'N/A' AND Items.Area &lt;&gt; 'NONE' AND Items.Area &lt;&gt; 'UNKNOWN'&#xA;AND tblUnvAreas.AreaUID IS NULL&#xA;GROUP BY Items.Area&#xA;&#xA;UPDATE _ETL_Items&#xA;SET AreaUID = tblUnvAreas.AreaUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblUnvAreas ON UPPER(Items.Area) = UPPER(tblUnvAreas.AreaName)&#xA;WHERE Items.Area IS NOT NULL AND Items.Area &lt;&gt; ''&#xA;AND Items.Area &lt;&gt; 'N/A' AND Items.Area &lt;&gt; 'NONE' AND Items.Area &lt;&gt; 'UNKNOWN'&#xA;AND (Items.AreaUID IS NULL&#xA;OR Items.AreaUID &lt;&gt; tblUnvAreas.AreaUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET AreaUID = 0&#xA;WHERE AreaUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\03 - INSERT TW Item Types"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{29030C4F-E087-48F3-BA4E-66B45CC9FFD2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="03 - INSERT TW Item Types"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--- Insert Item Types&#xA;&#xA;--IF (SELECT COUNT(*) FROM tblTechItemTypes WHERE ItemTypeUID = 0) = 0&#xA;--&#x9;BEGIN&#xA;--&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes ON &#xA;--&#x9;&#x9;INSERT INTO tblTechItemTypes (ItemTypeUID, ItemTypeName, ItemTypeDescription,&#xA;--&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;--&#x9;&#x9;VALUES (0, 'NONE', NULL, 0, GETDATE(), 0, GETDATE())&#xA;--&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes OFF&#xA;--&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM tblTechItemTypes WHERE ItemTypeName = 'Unspecified') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechItemTypes (ItemTypeName, ItemTypeDescription,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES ('Unspecified', NULL, 0, GETDATE(), 0, GETDATE())&#xA;&#x9;END&#xA;&#xA;declare @UnspecifiedItemTypeUID int&#xA;&#xA;select @UnspecifiedItemTypeUID  = ItemTypeUID FROM tblTechItemTypes WHERE ItemTypeName = 'Unspecified'&#xA;&#xA;/*&#xA;Using 0/None for missing item types cause problems with Audits&#xA;For ABQ Only - Unspecified is 63&#xA;*/&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ProductTypeDescription = ''&#xA;WHERE ProductTypeDescription IS NULL&#xA;OR ProductTypeDescription = 'NONE'&#xA;OR ProductTypeDescription = 'N/A'&#xA;OR ProductTypeDescription = 'UNKNOWN'&#xA;&#xA;INSERT INTO tblTechItemTypes (ItemTypeName, ItemTypeDescription,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.ProductType,&#xA;CASE WHEN MAX(Items.ProductTypeDescription) &lt;&gt; ''&#xA;THEN MAX(Items.ProductTypeDescription)&#xA;ELSE Items.ProductType END,&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND tblTechItemTypes.ItemTypeUID IS NULL&#xA;GROUP BY Items.ProductType&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = tblTechItemTypes.ItemTypeUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND (Items.ItemTypeUID IS NULL&#xA;OR Items.ItemTypeUID &lt;&gt; tblTechItemTypes.ItemTypeUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = @UnspecifiedItemTypeUID&#xA;WHERE ItemTypeUID IS NULL&#xA;&#xA;&#xA;&#xA;/*&#xA;--Original code&#xA;IF (SELECT COUNT(*) FROM tblTechItemTypes WHERE ItemTypeUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes ON &#xA;&#x9;&#x9;INSERT INTO tblTechItemTypes (ItemTypeUID, ItemTypeName, ItemTypeDescription,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes OFF&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ProductTypeDescription = ''&#xA;WHERE ProductTypeDescription IS NULL&#xA;OR ProductTypeDescription = 'NONE'&#xA;OR ProductTypeDescription = 'N/A'&#xA;OR ProductTypeDescription = 'UNKNOWN'&#xA;&#xA;INSERT INTO tblTechItemTypes (ItemTypeName, ItemTypeDescription,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.ProductType,&#xA;CASE WHEN MAX(Items.ProductTypeDescription) &lt;&gt; ''&#xA;THEN MAX(Items.ProductTypeDescription)&#xA;ELSE Items.ProductType END,&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND tblTechItemTypes.ItemTypeUID IS NULL&#xA;GROUP BY Items.ProductType&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = tblTechItemTypes.ItemTypeUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND (Items.ItemTypeUID IS NULL&#xA;OR Items.ItemTypeUID &lt;&gt; tblTechItemTypes.ItemTypeUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = 0&#xA;WHERE ItemTypeUID IS NULL&#xA;*/&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\04 - INSERT TW Catalog Items  - Opt 1 &amp; 2"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E5E7C464-DDEB-40B6-A849-819D2C7D4E5C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="04 - INSERT TW Catalog Items  - Opt 1 &amp; 2"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Items&#xA;SET Model = ''&#xA;WHERE Model IS NULL&#xA;OR Model = 'N/A'&#xA;OR Model = 'NONE'&#xA;OR Model = 'UNKNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 2 AND ETLSettingValue = 'False') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;DECLARE @PRODNUM AS INT&#xA;&#x9;&#x9;DECLARE @COUNT AS INT&#xA;&#x9;&#x9;SELECT @PRODNUM = Value - 1 FROM tblUnvCounter WHERE CounterUID = 4&#xA;&#x9;&#x9;INSERT INTO tblTechItems (ItemNumber, ItemName, ItemDescription, ItemTypeUID, ModelNumber, ManufacturerUID,&#xA;&#x9;&#x9;ItemSuggestedPrice, AreaUID, ItemNotes, SKU, SerialRequired, ProjectedLife, CustomField1, CustomField2,&#xA;&#x9;&#x9;CustomField3, Active, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT CONVERT(NVARCHAR, ROW_NUMBER() OVER(ORDER BY Items.ProductName, Items.Model) + @PRODNUM),&#xA;&#x9;&#x9;Items.ProductName, MAX(ISNULL(Items.ProductDescription, '')), MAX(ISNULL(Items.ItemTypeUID, 0)),&#xA;&#x9;&#x9;Items.Model, Items.ManufacturerUID, MAX(ISNULL(Items.SuggestedPrice, 0.0)), Items.AreaUID,&#xA;&#x9;&#x9;'CATALOG DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120),&#xA;&#x9;&#x9;MAX(ISNULL(Items.SKU, '')), 0, MAX(ISNULL(Items.ProjectedLife, 0)), MAX(ISNULL(Items.OtherField1, '')),&#xA;&#x9;&#x9;MAX(ISNULL(Items.OtherField2, '')), MAX(ISNULL(Items.OtherField3, '')), 1, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;LEFT JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE tblTechItems.ItemUID IS NULL&#xA;&#x9;&#x9;GROUP BY Items.ProductName, Items.Model, Items.ManufacturerUID, Items.AreaUID&#xA;&#x9;&#x9;SELECT @COUNT = @@ROWCOUNT&#xA;&#x9;&#x9;SELECT @PRODNUM = @PRODNUM + @COUNT&#xA;&#x9;&#x9;IF @COUNT &gt; 0&#xA;&#x9;&#x9;&#x9;BEGIN&#xA;&#x9;&#x9;&#x9;&#x9;UPDATE tblUnvCounter SET Value = @PRODNUM + 1 WHERE CounterUID = 4&#xA;&#x9;&#x9;&#x9;END&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET ItemUID = tblTechItems.ItemUID, ProductNumber = tblTechItems.ItemNumber&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE (Items.ItemUID IS NULL&#xA;&#x9;&#x9;OR Items.ItemUID &lt;&gt; tblTechItems.ItemUID&#xA;&#x9;&#x9;OR Items.ProductNumber IS NULL&#xA;&#x9;&#x9;OR Items.ProductNumber &lt;&gt; tblTechItems.ItemNumber)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechItems (ItemNumber, ItemName, ItemDescription, ItemTypeUID, ModelNumber, ManufacturerUID,&#xA;&#x9;&#x9;ItemSuggestedPrice, AreaUID, ItemNotes, SKU, SerialRequired, ProjectedLife, CustomField1, CustomField2,&#xA;&#x9;&#x9;CustomField3, Active, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT MAX(ISNULL(Items.ProductNumber, '')),&#xA;&#x9;&#x9;Items.ProductName, MAX(ISNULL(Items.ProductDescription, '')), MAX(ISNULL(Items.ItemTypeUID, 0)),&#xA;&#x9;&#x9;Items.Model, Items.ManufacturerUID, MAX(ISNULL(Items.SuggestedPrice, 0.0)), Items.AreaUID,&#xA;&#x9;&#x9;'CATALOG DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120),&#xA;&#x9;&#x9;MAX(ISNULL(Items.SKU, '')), 0, MAX(ISNULL(Items.ProjectedLife, 0)), MAX(ISNULL(Items.OtherField1, '')),&#xA;&#x9;&#x9;MAX(ISNULL(Items.OtherField2, '')), MAX(ISNULL(Items.OtherField3, '')), 1, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;LEFT JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE tblTechItems.ItemUID IS NULL&#xA;&#x9;&#x9;GROUP BY Items.ProductName, Items.Model, Items.ManufacturerUID, Items.AreaUID&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET ItemUID = tblTechItems.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE (Items.ItemUID IS NULL&#xA;&#x9;&#x9;OR Items.ItemUID &lt;&gt; tblTechItems.ItemUID)&#xA;&#x9;END&#xA;&#x9;&#xA;UPDATE _ETL_Items&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET Product = ProductName&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET Product = ProductNumber&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\05 - INSERT TW Vendors"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{99D7CFD2-D00D-4814-96E1-8225BEF8A082}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="05 - INSERT TW Vendors"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblVendor WHERE VendorID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor ON &#xA;&#x9;&#x9;INSERT INTO tblVendor (VendorID, VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;&#x9;&#x9;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;&#x9;&#x9;NULL, NULL, NULL, 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblVendor (VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;SELECT Purchases.Vendor, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;NULL, MIN(Purchases.VendorAccountNumber), NULL, 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 2&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblVendor ON UPPER(Purchases.Vendor) = UPPER(tblVendor.VendorName)&#xA;AND tblVendor.ApplicationUID = 2&#xA;WHERE Purchases.Vendor IS NOT NULL AND Purchases.Vendor &lt;&gt; ''&#xA;AND Purchases.Vendor &lt;&gt; 'N/A' AND Purchases.Vendor &lt;&gt; 'NONE' AND Purchases.Vendor &lt;&gt; 'UNKNOWN'&#xA;AND tblVendor.VendorID IS NULL&#xA;GROUP BY Purchases.Vendor&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET VendorUID = tblVendor.VendorID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblVendor ON UPPER(Purchases.Vendor) = UPPER(tblVendor.VendorName)&#xA;AND tblVendor.ApplicationUID = 2&#xA;WHERE Purchases.Vendor IS NOT NULL AND Purchases.Vendor &lt;&gt; ''&#xA;AND Purchases.Vendor &lt;&gt; 'N/A' AND Purchases.Vendor &lt;&gt; 'NONE' AND Purchases.Vendor &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.VendorUID IS NULL&#xA;OR Purchases.VendorUID &lt;&gt; tblVendor.VendorID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET VendorUID = 0&#xA;WHERE VendorUID IS NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\06 - INSERT TW Purchase Orders - Opt 3"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{90DA021A-B312-4FA2-859E-A8EB6556EB50}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="06 - INSERT TW Purchase Orders - Opt 3"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Purchases&#xA;SET PurchaseOrder = ''&#xA;WHERE PurchaseOrder IS NULL&#xA;OR PurchaseOrder = 'N/A'&#xA;OR PurchaseOrder = 'NONE'&#xA;OR PurchaseOrder = 'UNKNOWN'&#xA;OR PurchaseOrder = 'NOT KNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 3 AND ETLSettingValue = 'SiteID') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.Site) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.SiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteAddedSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.SiteAdded) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.SiteAddedSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteAddedSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ShippedToSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.ShippedToSite) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.ShippedToSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ShippedToSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.Site) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.SiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteAddedSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.SiteAdded) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.SiteAddedSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteAddedSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ShippedToSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.ShippedToSite) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.ShippedToSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ShippedToSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET SiteUID = 1&#xA;WHERE SiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET SiteAddedSiteUID = 1&#xA;WHERE SiteAddedSiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET ShippedToSiteUID = 0&#xA;WHERE ShippedToSiteUID IS NULL&#xA;&#xA;INSERT INTO tblTechPurchases (StatusUID, VendorUID, SiteUID, OrderNumber, PurchaseDate,&#xA;EstimatedDeliveryDate, Notes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT 32, MAX(Purchases.VendorUID), MIN(Purchases.SiteUID), Purchases.PurchaseOrder,&#xA;MIN(ISNULL(Purchases.PurchaseDate, GETDATE())), MIN(ISNULL(Purchases.DeliveryDate, GETDATE())),&#xA;LTRIM(ISNULL(MAX(Purchases.Notes), '') + ' ' + 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120)),&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblTechPurchases ON UPPER(Purchases.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Purchases.PurchaseOrder &lt;&gt; ''&#xA;AND tblTechPurchases.PurchaseUID IS NULL&#xA;GROUP BY Purchases.PurchaseOrder&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseUID = tblTechPurchases.PurchaseUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechPurchases ON UPPER(Purchases.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Purchases.PurchaseOrder &lt;&gt; ''&#xA;AND (Purchases.PurchaseUID IS NULL&#xA;OR Purchases.PurchaseUID &lt;&gt; tblTechPurchases.PurchaseUID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseUID = 0&#xA;WHERE PurchaseUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\07 - INSERT TW Funding Sources"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{BE2CB9CB-B3B0-4FA0-A209-924BADC7E2D5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="07 - INSERT TW Funding Sources"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblFundingSources WHERE FundingSourceUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources ON &#xA;&#x9;&#x9;INSERT INTO tblFundingSources (FundingSourceUID, FundingSource, FundingDesc, Active, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 1, 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblFundingSources (FundingSource, FundingDesc, Active, ApplicationUID)&#xA;SELECT Purchases.FundingSource, MAX(ISNULL(Purchases.FundingSourceDescription, '')), 1, 2&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblFundingSources ON UPPER(Purchases.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Purchases.FundingSource IS NOT NULL AND Purchases.FundingSource &lt;&gt; ''&#xA;AND Purchases.FundingSource &lt;&gt; 'N/A' AND Purchases.FundingSource &lt;&gt; 'NONE' AND Purchases.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND tblFundingSources.FundingSourceUID IS NULL&#xA;GROUP BY Purchases.FundingSource&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET FundingSourceUID = tblFundingSources.FundingSourceUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblFundingSources ON UPPER(Purchases.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Purchases.FundingSource IS NOT NULL AND Purchases.FundingSource &lt;&gt; ''&#xA;AND Purchases.FundingSource &lt;&gt; 'N/A' AND Purchases.FundingSource &lt;&gt; 'NONE' AND Purchases.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.FundingSourceUID IS NULL&#xA;OR Purchases.FundingSourceUID &lt;&gt; tblFundingSources.FundingSourceUID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET FundingSourceUID = 0&#xA;WHERE FundingSourceUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\08 - Update ETL Locations - Opt 3"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E2D09F08-A2A3-4B6A-96E7-81D375B27A58}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="08 - Update ETL Locations - Opt 3"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET Location = ''&#xA;WHERE Location IS NULL&#xA;OR Location = 'N/A'&#xA;OR Location = 'NONE'&#xA;OR Location = 'UNKNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 3 AND ETLSettingValue = 'SiteID') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Tags.Site) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Tags.SiteUID IS NULL&#xA;&#x9;&#x9;)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Tags.Site) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Tags.SiteUID IS NULL)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET SiteUID = 1&#xA;WHERE SiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = ISNULL(tblTeachers.TeachersUID, 0)&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;LEFT JOIN tblTeachers ON tblTechSites.SiteID = tblTeachers.CampusID&#xA;AND Tags.Location = tblTeachers.TeacherID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL)&#xA;AND Tags.EntityTypeUID = 3&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = ISNULL(tblStudents.StudentsUID, 0)&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;LEFT JOIN tblStudents ON tblTechSites.SiteID = tblStudents.CampusID&#xA;AND Tags.Location = tblStudents.StudentID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL)&#xA;AND Tags.EntityTypeUID = 4&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET Location = '', EntityTypeUID = 2&#xA;WHERE EntityUID = 0&#xA;&#xA;DECLARE @LOCATION AS VARCHAR(50)&#xA;SELECT @LOCATION = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 4&#xA;IF @LOCATION IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET Location = @LOCATION&#xA;&#x9;&#x9;WHERE Location = ''&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = tblUnvRooms.RoomUID, EntityTypeUID = 2&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblUnvRooms ON UPPER(Tags.Location) = UPPER(tblUnvRooms.RoomNumber)&#xA;AND Tags.SiteUID = tblUnvRooms.SiteUID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = 0, EntityTypeUID = 0&#xA;WHERE EntityUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\09 - Update ETL Status &amp; Dept - Opt 5"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{98635F9E-47F5-4901-803E-D4CEA92DD6C7}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="09 - Update ETL Status &amp; Dept - Opt 5"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @STATUS AS VARCHAR(50)&#xA;SELECT @STATUS = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 5&#xA;UPDATE _ETL_Inventory&#xA;SET [Status] = @STATUS&#xA;WHERE [Status] IS NULL&#xA;OR [Status] NOT IN ('In Use', 'Available')&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET statusID = 26&#xA;WHERE [Status] = 'Available'&#xA;and StatusID is null&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET statusID = 28&#xA;WHERE [Status] = 'In Use'&#xA;and StatusID is null&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET TechDepartmentUID = tblTechDepartments.TechDepartmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechDepartments ON UPPER(Tags.Department) = UPPER(tblTechDepartments.DepartmentName)&#xA;WHERE Tags.Department IS NOT NULL AND Tags.Department &lt;&gt; ''&#xA;AND Tags.Department &lt;&gt; 'N/A' AND Tags.Department &lt;&gt; 'NONE' AND Tags.Department &lt;&gt; 'UNKNOWN'&#xA;AND (Tags.TechDepartmentUID IS NULL)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET TechDepartmentUID = 0&#xA;WHERE TechDepartmentUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\10 - INSERT TW Funding Sources"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{38E4271D-35EC-437A-8868-38912667E566}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="10 - INSERT TW Funding Sources"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblFundingSources WHERE FundingSourceUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources ON &#xA;&#x9;&#x9;INSERT INTO tblFundingSources (FundingSourceUID, FundingSource, FundingDesc, Active, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 1, 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblFundingSources (FundingSource, FundingDesc, Active, ApplicationUID)&#xA;SELECT Tags.FundingSource, MAX(ISNULL(Tags.FundingSourceDescription, '')), 1, 2&#xA;FROM _ETL_Inventory AS Tags&#xA;LEFT JOIN tblFundingSources ON UPPER(Tags.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Tags.FundingSource IS NOT NULL AND Tags.FundingSource &lt;&gt; ''&#xA;AND Tags.FundingSource &lt;&gt; 'N/A' AND Tags.FundingSource &lt;&gt; 'NONE' AND Tags.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND tblFundingSources.FundingSourceUID IS NULL&#xA;GROUP BY Tags.FundingSource&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET FundingSourceUID = tblFundingSources.FundingSourceUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblFundingSources ON UPPER(Tags.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Tags.FundingSource IS NOT NULL AND Tags.FundingSource &lt;&gt; ''&#xA;AND Tags.FundingSource &lt;&gt; 'N/A' AND Tags.FundingSource &lt;&gt; 'NONE' AND Tags.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND (Tags.FundingSourceUID IS NULL)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET FundingSourceUID = 0&#xA;WHERE FundingSourceUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\11 - INSERT TW Vendors &amp; PO - Opt 17"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{BB0A384E-6E39-4DA4-BE13-7809C7842F4C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="11 - INSERT TW Vendors &amp; PO - Opt 17"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET PurchaseOrder = ''&#xA;WHERE PurchaseOrder IS NULL&#xA;OR PurchaseOrder = 'N/A'&#xA;OR PurchaseOrder = 'NONE'&#xA;OR PurchaseOrder = 'UNKNOWN'&#xA;OR PurchaseOrder = 'NOT KNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM tblVendor WHERE VendorID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor ON &#xA;&#x9;&#x9;INSERT INTO tblVendor (VendorID, VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;&#x9;&#x9;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;&#x9;&#x9;NULL, NULL, NULL, 'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor OFF&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = _ETL_Purchases.PurchaseUID, InventoryTypeUID = 2,&#xA;FundingSourceUID = _ETL_Purchases.FundingSourceUID, PurchaseDate = _ETL_Purchases.PurchaseDate&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN _ETL_Purchases ON UPPER(Tags.PurchaseOrder) = UPPER(_ETL_Purchases.PurchaseOrder)&#xA;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;AND Tags.PurchaseUID IS NULL&#xA;&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 0 --eval false&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechPurchases (StatusUID, VendorUID, SiteUID, OrderNumber, PurchaseDate,&#xA;&#x9;&#x9;EstimatedDeliveryDate, Notes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT 33, 0, MIN(Tags.SiteUID), Tags.PurchaseOrder,&#xA;&#x9;&#x9;MIN(ISNULL(Tags.PurchaseDate, GETDATE())), NULL,&#xA;&#x9;&#x9;'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchases ON UPPER(Tags.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;&#x9;&#x9;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;&#x9;&#x9;AND tblTechPurchases.PurchaseUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.PurchaseOrder&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = tblTechPurchases.PurchaseUID, InventoryTypeUID = 2&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchases ON UPPER(Tags.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;AND Tags.PurchaseUID IS NULL&#xA;and tags.InventoryUID is null&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = 0, InventoryTypeUID = 1&#xA;WHERE PurchaseUID IS NULL&#xA;and InventoryUID is null&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\12 - Update ETL Purchase Items &amp; Details - Opt 1 &amp; 17"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{284D9338-FFB6-469B-8A66-2F5BECA4741B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="12 - Update ETL Purchase Items &amp; Details - Opt 1 &amp; 17"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--12&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0  --eval true&#xA;&#x9;BEGIN&#xA;&#xA;&#x9;&#x9;--Do not change if line is closed&#xA;&#x9;&#x9;--select * &#xA;&#x9;&#x9;UPDATE _ETL_Inventory Set ItemUID = tti.ItemUID&#xA;&#x9;&#x9;from _ETL_Inventory etl&#xA;&#x9;&#x9;join tblTechInventory tti on ltrim(rtrim(etl.Tag)) = ltrim(rtrim(tti.Tag))&#xA;&#x9;&#x9;join _ETL_Purchases pur on ltrim(rtrim(etl.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;&#x9;&#x9;where POLineClose = 1&#xA;&#x9;&#x9;and etl.ItemUID is null&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Tags.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;&#x9;AND UPPER(ISNULL(Tags.Model, '')) = UPPER(ISNULL(_ETL_Items.Model, ''))&#xA;&#x9;&#x9;&#x9;AND UPPER(ISNULL(Tags.Manufacturer, '')) = UPPER(ISNULL(_ETL_Items.Manufacturer, ''))&#xA;&#x9;&#x9;&#x9;AND UPPER(ISNULL(Tags.Area, '')) = UPPER(ISNULL(_ETL_Items.Area, ''))&#xA;&#x9;&#x9;WHERE _ETL_Items.ItemUID &gt; 0&#xA;&#x9;&#x9;AND Tags.Product IS NOT NULL AND Tags.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Tags.Product &lt;&gt; 'N/A' AND Tags.Product &lt;&gt; 'NONE' AND Tags.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Tags.ItemUID IS NULL)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#x9;SET ItemUID = Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT MIN(ItemUID) AS ItemUID, Product&#xA;&#x9;&#x9;FROM _ETL_Items&#xA;&#x9;&#x9;GROUP BY Product) AS Items&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Items.Product)&#xA;&#x9;&#x9;WHERE Tags.ItemUID IS NULL&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Tags.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;WHERE Tags.Product IS NOT NULL AND Tags.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Tags.Product &lt;&gt; 'N/A' AND Tags.Product &lt;&gt; 'NONE' AND Tags.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Tags.ItemUID IS NULL)&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 1  --eval true&#xA;&#x9;&#x9;--Changed order from price/PO, product/PO, product/price/PO &#xA;&#x9;&#x9;--TO product/price/PO, product/PO, price/PO&#xA;&#x9;BEGIN&#xA;&#xA;&#x9;&#x9;--Do not change any closed line&#xA;&#x9;&#x9;--select *&#xA;&#x9;&#x9;update etl set PurchaseItemDetailUID = tship.PurchaseItemDetailUID&#xA;&#x9;&#x9;from _ETL_Inventory etl&#xA;&#x9;&#x9;join _ETL_Purchases pur on ltrim(rtrim(etl.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;&#x9;&#x9;join tblTechInventory tti on ltrim(rtrim(etl.Tag)) = ltrim(rtrim(tti.Tag))&#xA;&#x9;&#x9;join tblTechPurchaseInventory tpi on tti.InventoryUID = tpi.InventoryUID&#xA;&#x9;&#x9;join tblTechPurchaseItemShipments tship on tpi.PurchaseItemShipmentUID = tship.PurchaseItemShipmentUID&#xA;&#x9;&#x9;where etl.PurchaseItemDetailUID is null&#xA;&#x9;&#x9;and POLineClose = 1&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;join _ETL_Purchases pur on ltrim(rtrim(tags.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName, PID.PurchasePrice, &#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName, PID.PurchasePrice&#xA;&#x9;&#x9;&#x9;) AS Purchases&#xA;&#x9;&#x9;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;&#x9;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;WHERE POLineClose = 0&#xA;&#x9;&#x9;and (Tags.PurchaseItemDetailUID IS NULL&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;join _ETL_Purchases pur on ltrim(rtrim(tags.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName,&#xA;&#x9;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName&#xA;&#x9;&#x9;&#x9;) AS Purchases&#xA;&#x9;&#x9;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE POLineClose = 0&#xA;&#x9;&#x9;and (Tags.PurchaseItemDetailUID IS NULL OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;join _ETL_Purchases pur on ltrim(rtrim(tags.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, PID.PurchasePrice,&#xA;&#x9;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;&#x9;GROUP BY P.OrderNumber, PID.PurchasePrice&#xA;&#x9;&#x9;&#x9;) AS Purchases&#xA;&#x9;&#x9;&#x9;&#x9;ON Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE  POLineClose = 0&#xA;&#x9;&#x9;and (Tags.PurchaseItemDetailUID IS NULL OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemUID = Purchases.ItemUID&#xA;FROM _ETL_Inventory AS Tags&#xA;join _ETL_Purchases pur on ltrim(rtrim(tags.PurchaseOrder)) = ltrim(rtrim(pur.PurchaseOrder))&#xA;JOIN tblTechPurchaseItemDetails AS Purchases&#xA;ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;WHERE  POLineClose = 0&#xA;and Purchases.ItemUID &gt; 0&#xA;AND (Tags.ItemUID IS NULL)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\13 - UPDATE Inventory - Opt 15, 6, 16, 18"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{4313D14F-2583-4CD3-A7DF-3A663BA768C4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="13 - UPDATE Inventory - Opt 15, 6, 16, 18"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--13&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET Serial = ''&#xA;WHERE Serial IS NULL&#xA;OR Serial = 'N/A'&#xA;OR Serial = 'NONE'&#xA;OR Serial = 'UNKNOWN'&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = tblTechInventory.InventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.AssetID) = UPPER(tblTechInventory.AssetID)&#xA;WHERE (Tags.InventoryUID IS NULL)&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 15 AND ETLSettingValue = 'True') = 1  --eval true&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryUID = tblTechInventory.InventoryUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;&#x9;&#x9;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET AssetID = Tags.AssetID&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.AssetID IS NULL&#xA;&#x9;END&#xA;&#xA;--InventoryUID set to -1 means possible duplicate Tag in ETL&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = -1&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 6 AND ETLSettingValue = 'True') = 1  --eval false&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Tag = Tags.Tag,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Tag &lt;&gt; Tags.Tag&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Serial = Tags.Serial,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Serial &lt;&gt; Tags.Serial&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 16 AND ETLSettingValue = 'True') = 1  --eval false&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND TI.ItemUID &lt;&gt; Tags.ItemUID&#xA;&#x9;END&#xA;--ELSE   No more updates to tag except asset id / NB 3/20/2018&#xA;&#x9;--BEGIN&#xA;&#x9;--&#x9;UPDATE tblTechInventory&#xA;&#x9;--&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;--&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;--&#x9;FROM tblTechInventory AS TI&#xA;&#x9;--&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;--&#x9;LEFT JOIN tblTechPurchaseInventory TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;&#x9;--&#x9;WHERE Tags.PurchaseUID = 0&#xA;&#x9;--&#x9;AND TPI.PurchaseInventoryUID IS NULL&#xA;&#x9;--&#x9;AND Tags.ItemUID &gt; 0&#xA;&#x9;--&#x9;AND TI.ItemUID = 0&#xA;&#x9;--END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 18 AND ETLSettingValue = 'True') = 1  --eval false&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET FundingSourceUID = Tags.FundingSourceUID,&#xA;&#x9;&#x9;PurchasePrice = Tags.PurchasePrice, PurchaseDate = Tags.PurchaseDate,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.FundingSourceUID &lt;&gt; Tags.FundingSourceUID&#xA;&#x9;&#x9;OR TI.PurchasePrice &lt;&gt; Tags.PurchasePrice&#xA;&#x9;&#x9;OR TI.PurchaseDate &lt;&gt; Tags.PurchaseDate&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NULL AND Tags.PurchasePrice IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NOT NULL AND Tags.PurchasePrice IS NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NULL AND Tags.PurchaseDate IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NOT NULL AND Tags.PurchaseDate IS NULL)&#xA;&#x9;END&#xA;&#xA;UPDATE tblTechInventory&#xA;SET InventorySourceUID = Tags.InventoryTypeUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventory AS TI&#xA;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;WHERE TI.InventoryTypeUID is null&#xA;&#xA;UPDATE tblTechInventoryHistory&#xA;SET InventorySourceUID = tblTechInventory.InventorySourceUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventoryHistory AS TIH&#xA;JOIN tblTechInventory ON TIH.InventoryUID = tblTechInventory.InventoryUID&#xA;WHERE TIH.InventoryTypeUID is null&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\14 - UPDATE TW Custom Fields - Opt 7-14"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{E7990EC6-8F21-4E97-A1B3-30B7DB0B306D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="14 - UPDATE TW Custom Fields - Opt 7-14"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @Label VARCHAR(50)&#xA;DECLARE @Type VARCHAR(50)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemTypeUID = tblTechItems.ItemTypeUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechItems ON Tags.ItemUID = tblTechItems.ItemUID&#xA;WHERE Tags.ItemTypeUID IS NULL&#xA;OR (Tags.ItemTypeUID &lt;&gt; tblTechItems.ItemTypeUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemTypeUID = 0&#xA;WHERE ItemTypeUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 7 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta1UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 7&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 8&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt1UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField1&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta1UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField1&#xA;&#x9;&#x9;AND Tags.CustomField1 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta1UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt1UID&#xA;&#x9;&#x9;AND Tags.InventoryExt1UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta1UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 9 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta2UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 9&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 10&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt2UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField2&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta2UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField2&#xA;&#x9;&#x9;AND Tags.CustomField2 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta2UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt2UID&#xA;&#x9;&#x9;AND Tags.InventoryExt2UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta2UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 11 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta3UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 11&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 12&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt3UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField3&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta3UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField3&#xA;&#x9;&#x9;AND Tags.CustomField3 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta3UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt3UID&#xA;&#x9;&#x9;AND Tags.InventoryExt3UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta3UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 13 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta4UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 13&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 14&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt4UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField4&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta4UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField4&#xA;&#x9;&#x9;AND Tags.CustomField4 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta4UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt4UID&#xA;&#x9;&#x9;AND Tags.InventoryExt4UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta4UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID IS NOT NULL&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\15 - INSERT TW Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{C1040114-6D91-4DD8-8EFD-0E5853492517}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="15 - INSERT TW Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--15&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET SiteUID = tblTechSites.SiteUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;WHERE (Tags.SiteUID IS NULL)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET SiteUID = 0&#xA;WHERE SiteUID IS NULL&#xA;&#xA;INSERT INTO tblTechInventory (InventorySourceUID, ItemUID, SiteUID, EntityUID, EntityTypeUID, StatusUID,&#xA;Tag, Serial, FundingSourceUID, PurchasePrice, PurchaseDate, ExpirationDate, InventoryNotes,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate, AssetID, InventoryTypeUID)&#xA;SELECT CASE WHEN Tags.PurchaseUID = 0 THEN 1 ELSE 2 END,&#xA;Tags.ItemUID, Tags.SiteUID, Tags.EntityUID, 2, Tags.StatusID,&#xA;Tags.Tag, Tags.Serial, Tags.FundingSourceUID, Tags.PurchasePrice, Tags.PurchaseDate,&#xA;Tags.ExpirationDate, Tags.InventoryNotes, 0, GETDATE(), 0, GETDATE(), Tags.AssetID, 1&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.ItemUID &gt; 0&#xA;AND Tags.SiteUID &gt; 1&#xA;AND Tags.EntityUID &gt; 0&#xA;AND Tags.InventoryUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = tblTechInventory.InventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON Tags.Tag = tblTechInventory.Tag&#xA;WHERE Tags.InventoryUID IS NULL&#xA;--OR (Tags.InventoryUID &gt; 0&#xA;--AND Tags.InventoryUID &lt;&gt; tblTechInventory.InventoryUID)&#xA;&#xA;--InventoryUID set to 0 means Unknown Error&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = 0&#xA;WHERE InventoryUID IS NULL&#xA;&#xA;INSERT INTO tblTechInventoryHistory (InventoryUID, InventorySourceUID,&#xA;SiteUID, EntityUID, EntityTypeUID, StatusUID,&#xA;OriginSiteUID, OriginStatusUID, OriginEntityUID, OriginEntityTypeUID,&#xA;InventoryHistoryNotes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate, InventoryTypeUID)&#xA;SELECT tblTechInventory.InventoryUID, tblTechInventory.InventorySourceUID,&#xA;tblTechInventory.SiteUID, tblTechInventory.EntityUID, 2, tblTechInventory.StatusUID,&#xA;tblTechInventory.SiteUID, tblTechInventory.StatusUID, tblTechInventory.EntityUID, 2,&#xA;'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 0, GETDATE(), 0, GETDATE(), 1&#xA;FROM tblTechInventory&#xA;LEFT JOIN tblTechInventoryHistory ON tblTechInventory.InventoryUID = tblTechInventoryHistory.InventoryUID&#xA;WHERE tblTechInventoryHistory.InventoryHistoryUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\16 - INSERT TW Custom Field Values - Opt 7, 9, 11, 13"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{6081B8B9-A65D-4F9B-9654-E573C397C6C8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="16 - INSERT TW Custom Field Values - Opt 7, 9, 11, 13"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @Label VARCHAR(50)&#xA;DECLARE @Type VARCHAR(50)&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 7 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 7&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 8&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 1&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta1UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta1UID, Tags.CustomField1&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt1UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt1UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 9 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 9&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 10&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 2&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta2UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta2UID, Tags.CustomField2&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt2UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt2UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 11 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 11&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 12&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 3&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID IS NOT NULL&#xA;&#x9;&#x9;AND Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta3UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta3UID, Tags.CustomField3&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt3UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt3UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 13 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 13&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 14&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 4&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID IS NOT NULL&#xA;&#x9;&#x9;AND Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta4UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta4UID, Tags.CustomField4&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt4UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt4UID IS NULL&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\17 -Update ETL Detail Items - Opt 1"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{3D79A13D-205B-4E17-AF7F-BD44FFBB8A53}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="17 -Update ETL Detail Items - Opt 1"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--17&#xA;&#xA;--select * &#xA;update etl set PurchaseItemDetailUID = tpid.PurchaseItemDetailUID, ItemUID = tpid.ItemUID&#xA;from _ETL_Purchases etl&#xA;join tblTechPurchases tpur on ltrim(rtrim(etl.PurchaseOrder)) = ltrim(rtrim(tpur.OrderNumber))&#xA;join tblTechPurchaseItemDetails tpid on tpur.PurchaseUID = tpid.PurchaseUID and tpid.LineNumber = etl.LineNumber&#xA;where etl.POLineClose = 1&#xA;&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0  --eval true&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Purchases.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Model, '')) = UPPER(ISNULL(_ETL_Items.Model, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Manufacturer, '')) = UPPER(ISNULL(_ETL_Items.Manufacturer, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Area, '')) = UPPER(ISNULL(_ETL_Items.Area, ''))&#xA;&#x9;&#x9;WHERE Purchases.Product IS NOT NULL AND Purchases.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Purchases.Product &lt;&gt; 'N/A' AND Purchases.Product &lt;&gt; 'NONE' AND Purchases.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;and Purchases.POLineClose = 0&#xA;&#x9;&#x9;AND (Purchases.ItemUID IS NULL OR Purchases.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Purchases.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;WHERE Purchases.Product IS NOT NULL AND Purchases.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Purchases.Product &lt;&gt; 'N/A' AND Purchases.Product &lt;&gt; 'NONE' AND Purchases.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Purchases.ItemUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\18 - INSERT_Update TW Purchase Details &amp; Inventory - Opt 17"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{311BA4FD-3BA3-43F7-91CA-7A4AEA9ABCBA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="18 - INSERT_Update TW Purchase Details &amp; Inventory - Opt 17"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--18&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET AccountCode = ''&#xA;WHERE AccountCode IS NULL&#xA;OR AccountCode = 'N/A'&#xA;OR AccountCode = 'NONE'&#xA;OR AccountCode = 'UNKNOWN'&#xA;GO&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TechDepartmentUID = tblTechDepartments.TechDepartmentUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechDepartments ON UPPER(Purchases.Department) = UPPER(tblTechDepartments.DepartmentName)&#xA;WHERE Purchases.Department IS NOT NULL AND Purchases.Department &lt;&gt; ''&#xA;AND Purchases.Department &lt;&gt; 'N/A' AND Purchases.Department &lt;&gt; 'NONE' AND Purchases.Department &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.TechDepartmentUID IS NULL&#xA;OR Purchases.TechDepartmentUID &lt;&gt; tblTechDepartments.TechDepartmentUID)&#xA;GO&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TechDepartmentUID = 0&#xA;WHERE TechDepartmentUID IS NULL&#xA;GO&#xA;&#xA;--IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 1 -- true as of 5/10/18&#xA;--&#x9;BEGIN&#xA;&#x9;&#xA;&#xA;&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;&#x9;&#x9;SET ItemUID = Purchases.ItemUID, &#xA;&#x9;&#x9;&#x9;FundingSourceUID = Purchases.FundingSourceUID,&#xA;&#x9;&#x9;&#x9;SiteAddedSiteUID = Purchases.SiteAddedSiteUID, &#xA;&#x9;&#x9;&#x9;QuantityOrdered = ISNULL(Purchases.QuantityOrdered, 0),&#xA;&#x9;&#x9;&#x9;QuantityReceived = ISNULL(Purchases.QuantityReceived, 0), &#xA;&#x9;&#x9;&#x9;PurchasePrice = ISNULL(Purchases.PurchasePrice, 0),&#xA;&#x9;&#x9;&#x9;AccountCode = Purchases.AccountCode, LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;&#x9;&#x9;JOIN _ETL_Purchases AS Purchases ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;WHERE POLineCLose = 0&#xA;&#x9;&#x9;and (TPID.ItemUID &lt;&gt; Purchases.ItemUID&#xA;&#x9;&#x9;OR (TPID.FundingSourceUID &lt;&gt; Purchases.FundingSourceUID&#xA;&#x9;&#x9;OR TPID.SiteAddedSiteUID &lt;&gt; Purchases.SiteAddedSiteUID&#xA;&#x9;&#x9;OR TPID.QuantityOrdered &lt;&gt; ISNULL(Purchases.QuantityOrdered, 0)&#xA;&#x9;&#x9;OR TPID.QuantityReceived &lt;&gt; ISNULL(Purchases.QuantityReceived, 0)&#xA;&#x9;&#x9;OR TPID.PurchasePrice &lt;&gt; ISNULL(Purchases.PurchasePrice, 0)&#xA;&#x9;&#x9;OR TPID.AccountCode &lt;&gt; Purchases.AccountCode))&#xA;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tpid.PurchaseItemDetailUID, ItemUID = tpid.ItemUID,&#xA;&#x9;&#x9;&#x9;FundingSourceUID = tpid.FundingSourceUID,&#xA;&#x9;&#x9;&#x9;SiteAddedSiteUID = tpid.SiteAddedSiteUID, &#xA;&#x9;&#x9;&#x9;QuantityOrdered = ISNULL(tpid.QuantityOrdered, 0),&#xA;&#x9;&#x9;&#x9;QuantityReceived = ISNULL(tpid.QuantityReceived, 0), &#xA;&#x9;&#x9;&#x9;PurchasePrice = ISNULL(tpid.PurchasePrice, 0),&#xA;&#x9;&#x9;&#x9;AccountCode = tpid.AccountCode &#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails tpid ON Purchases.PurchaseUID = tpid.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tpid.LineNumber&#xA;&#x9;&#x9;WHERE POLineCLose = 1 &#xA;&#x9;&#x9;and Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;--OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#x9;&#x9;GO&#xA;&#x9;&#x9;&#xA;&#xA;&#x9;&#x9;--UPDATE tblTechInventory&#xA;&#x9;&#x9;--SET PurchasePrice = TPID.PurchasePrice, FundingSourceUID = TPID.FundingSourceUID,&#xA;&#x9;&#x9;--LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;--FROM tblTechInventory AS TI&#xA;&#x9;&#x9;--JOIN tblTechPurchaseInventory AS TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;&#x9;&#x9;--JOIN tblTechPurchaseItemShipments AS TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;&#x9;&#x9;--JOIN tblTechPurchaseItemDetails AS TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;&#x9;&#x9;--WHERE TI.PurchasePrice &lt;&gt; TPID.PurchasePrice&#xA;&#x9;&#x9;--OR TI.FundingSourceUID &lt;&gt; TPID.FundingSourceUID&#xA;&#xA;&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID, StatusUID,&#xA;&#x9;&#x9;SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode, LineNumber,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT Purchases.PurchaseUID, MAX(Purchases.ItemUID), MAX(Purchases.FundingSourceUID), 32,&#xA;&#x9;&#x9;MAX(Purchases.SiteAddedSiteUID), MAX(ISNULL(Purchases.QuantityOrdered, 0)),&#xA;&#x9;&#x9;MAX(ISNULL(Purchases.QuantityReceived, 0)), MAX(Purchases.PurchasePrice), MAX(Purchases.AccountCode),&#xA;&#x9;&#x9;Purchases.LineNumber, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE Purchases.PurchaseUID &gt; 0&#xA;&#x9;&#x9;AND Purchases.ItemUID &gt; 0&#xA;&#x9;&#x9;AND tblTechPurchaseItemDetails.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;GROUP BY Purchases.PurchaseUID, Purchases.LineNumber&#xA;&#x9;&#x9;GO&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#x9;&#x9;GO&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;--UPDATE tblTechInventory&#xA;&#x9;&#x9;--SET ItemUID = TPID.ItemUID&#xA;&#x9;&#x9;--FROM tblTechInventory AS Inventory&#xA;&#x9;&#x9;--JOIN tblTechPurchaseInventory AS TPI ON Inventory.InventoryUID = TPI.InventoryUID&#xA;&#x9;&#x9;--JOIN tblTechPurchaseItemShipments AS TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;&#x9;&#x9;--JOIN tblTechPurchaseItemDetails AS TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;&#x9;&#x9;--WHERE Inventory.ItemUID &lt;&gt; TPID.ItemUID&#xA;--&#x9;END&#xA;--ELSE&#xA;--&#x9;BEGIN&#xA;--&#x9;&#x9;UPDATE _ETL_Purchases&#xA;--&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;--&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;--&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;--&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;--&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;--&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;--&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;--&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;--&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;--&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;--&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#xA;--&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;--&#x9;&#x9;SET QuantityOrdered = ISNULL(Purchases.QuantityOrdered, 0),&#xA;--&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;--&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;--&#x9;&#x9;JOIN _ETL_Purchases AS Purchases&#xA;--&#x9;&#x9;ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;--&#x9;&#x9;WHERE TPID.QuantityOrdered &lt;&gt; ISNULL(Purchases.QuantityOrdered, 0)&#xA;&#xA;--&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;--&#x9;&#x9;SET QuantityReceived = ISNULL(Purchases.QuantityReceived, 0),&#xA;--&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;--&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;--&#x9;&#x9;JOIN _ETL_Purchases AS Purchases&#xA;--&#x9;&#x9;ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;--&#x9;&#x9;WHERE TPID.QuantityReceived &lt;&gt; ISNULL(Purchases.QuantityReceived, 0)&#xA;&#xA;--&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID, StatusUID,&#xA;--&#x9;&#x9;SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode, LineNumber,&#xA;--&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;--&#x9;&#x9;SELECT Purchases.PurchaseUID, Purchases.ItemUID, Purchases.FundingSourceUID, 32,&#xA;--&#x9;&#x9;Purchases.SiteAddedSiteUID, MAX(ISNULL(Purchases.QuantityOrdered, 0)),&#xA;--&#x9;&#x9;MAX(ISNULL(Purchases.QuantityReceived, 0)), Purchases.PurchasePrice, Purchases.AccountCode,&#xA;--&#x9;&#x9;Purchases.LineNumber, 0, GETDATE(), 0, GETDATE()&#xA;--&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;--&#x9;&#x9;LEFT JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;--&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;--&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;--&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;--&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;--&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;--&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;--&#x9;&#x9;WHERE Purchases.PurchaseUID &gt; 0&#xA;--&#x9;&#x9;AND Purchases.ItemUID &gt; 0&#xA;--&#x9;&#x9;AND tblTechPurchaseItemDetails.PurchaseItemDetailUID IS NULL&#xA;--&#x9;&#x9;GROUP BY Purchases.PurchaseUID, Purchases.ItemUID, Purchases.FundingSourceUID,&#xA;--&#x9;&#x9;Purchases.SiteAddedSiteUID, Purchases.PurchasePrice, Purchases.AccountCode, Purchases.LineNumber&#xA;&#xA;--&#x9;&#x9;UPDATE _ETL_Purchases&#xA;--&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;--&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;--&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;--&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;--&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;--&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;--&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;--&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;--&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;--&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;--&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;--&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemDetailUID = 0&#xA;WHERE PurchaseItemDetailUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\19 - UPDATE ETL Purchase Item Details"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{C796696E-E2D8-4143-91E8-64FDD6C9F9CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="19 - UPDATE ETL Purchase Item Details"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--19&#xA;&#xA;--select * &#xA;UPDATE _ETL_Inventory SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT P1.PurchaseUID, P1.ItemUID, P1.FundingSourceUID, P1.PurchasePrice, P1.LineNumber, P2.PurchaseItemDetailUID, p1.POLineClose&#xA;&#x9;FROM (SELECT PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice, POLineClose, MIN(LineNumber) AS LineNumber&#xA;&#x9;&#x9;&#x9;FROM _ETL_Purchases&#xA;&#x9;&#x9;&#x9;GROUP BY PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice, POLineClose&#xA;&#x9;&#x9;) AS P1&#xA;&#x9;&#x9;JOIN _ETL_Purchases P2&#xA;&#x9;&#x9;&#x9;ON P1.PurchaseUID = P2.PurchaseUID&#xA;&#x9;&#x9;&#x9;AND P1.ItemUID = P2.ItemUID&#xA;&#x9;&#x9;&#x9;AND P1.FundingSourceUID = P2.FundingSourceUID&#xA;&#x9;&#x9;&#x9;AND P1.PurchasePrice = P2.PurchasePrice&#xA;&#x9;&#x9;&#x9;AND P1.LineNumber = P2.LineNumber&#xA;&#x9;) AS Purchases&#xA;&#x9;&#x9;ON Tags.PurchaseUID = Purchases.PurchaseUID&#xA;&#x9;&#x9;AND Tags.ItemUID = Purchases.ItemUID&#xA;&#x9;&#x9;AND Tags.FundingSourceUID = Purchases.FundingSourceUID&#xA;&#x9;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;WHERE POLineClose = 0&#xA;and Purchases.ItemUID &gt; 0&#xA;AND (Tags.PurchaseItemDetailUID IS NULL OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;GO&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT P1.PurchaseUID, P1.ItemUID, P1.FundingSourceUID, P1.PurchasePrice, P1.LineNumber, P2.PurchaseItemDetailUID, p1.POLineClose&#xA;&#x9;&#x9;FROM (SELECT PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice, POLineClose, MIN(LineNumber) AS LineNumber&#xA;&#x9;&#x9;&#x9;&#x9;FROM _ETL_Purchases&#xA;&#x9;&#x9;&#x9;&#x9;GROUP BY PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice, POLineClose&#xA;&#x9;&#x9;&#x9;) AS P1&#xA;&#x9;JOIN tblTechPurchaseItemDetails P2&#xA;&#x9;ON P1.PurchaseUID = P2.PurchaseUID&#xA;&#x9;AND P1.ItemUID = P2.ItemUID&#xA;&#x9;AND P1.FundingSourceUID = P2.FundingSourceUID&#xA;&#x9;AND P1.PurchasePrice = P2.PurchasePrice&#xA;&#x9;AND P1.LineNumber = P2.LineNumber&#xA;&#x9;) AS Purchases&#xA;ON Tags.PurchaseUID = Purchases.PurchaseUID&#xA;&#x9;AND Tags.ItemUID = Purchases.ItemUID&#xA;&#x9;AND Tags.FundingSourceUID = Purchases.FundingSourceUID&#xA;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;WHERE POLineClose = 0&#xA;and (Tags.PurchaseItemDetailUID IS NULL&#xA;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;GO&#xA;&#xA;WHILE (SELECT COUNT(*)&#xA;&#x9;&#x9;FROM (SELECT PurchaseItemDetailUID, COUNT(*) AS c&#xA;&#x9;&#x9;&#x9;FROM _ETL_Inventory&#xA;&#x9;&#x9;&#x9;GROUP BY PurchaseItemDetailUID) AS P1&#xA;&#x9;&#x9;JOIN (SELECT EP.PurchaseItemDetailUID AS PID1, EP.QuantityOrdered, EP1.PurchaseItemDetailUID AS PID2, ep.POLineClose, EP1.LineNumber&#xA;&#x9;&#x9;&#x9;&#x9;FROM _ETL_Purchases EP&#xA;&#x9;&#x9;&#x9;&#x9;LEFT JOIN _ETL_Purchases EP1 ON EP.PurchaseUID = EP1.PurchaseUID&#xA;&#x9;&#x9;&#x9;&#x9;AND EP.ItemUID = EP1.ItemUID&#xA;&#x9;&#x9;&#x9;&#x9;AND EP.FundingSourceUID = EP1.FundingSourceUID&#xA;&#x9;&#x9;&#x9;&#x9;AND EP.PurchasePrice = EP1.PurchasePrice&#xA;&#x9;&#x9;&#x9;&#x9;AND EP.LineNumber &lt; EP1.LineNumber&#xA;&#x9;&#x9;&#x9;) AS P2 ON P1.PurchaseItemDetailUID = P2.PID1 AND P1.c &gt; P2.QuantityOrdered&#xA;&#x9;&#x9;&#x9;AND PID2 IS NOT NULL&#xA;&#x9;&#x9;where POLineClose = 0&#xA;&#x9;&#x9;) &gt; 0&#xA;BEGIN&#xA;&#x9;DECLARE @pidUID INT&#xA;&#x9;DECLARE @quantity1 INT&#xA;&#x9;DECLARE @purchase INT&#xA;&#x9;DECLARE @item INT&#xA;&#x9;DECLARE @funding INT&#xA;&#x9;DECLARE @price MONEY&#xA;&#x9;DECLARE @line INT&#xA;&#x9;DECLARE @lastUID INT&#xA;&#x9;DECLARE @nextline INT&#xA;&#x9;DECLARE @nextpidUID INT&#xA;&#xA;&#x9;DECLARE pidUIDcursor CURSOR FOR&#xA;&#x9;SELECT DISTINCT P1.PurchaseItemDetailUID&#xA;&#x9;FROM (SELECT PurchaseItemDetailUID, COUNT(*) AS c&#xA;&#x9;&#x9;FROM _ETL_Inventory&#xA;&#x9;&#x9;GROUP BY PurchaseItemDetailUID) AS P1&#xA;&#x9;JOIN (SELECT EP.PurchaseItemDetailUID AS PID1, &#xA;&#x9;&#x9;&#x9;EP.QuantityOrdered,&#xA;&#x9;&#x9;&#x9;EP1.PurchaseItemDetailUID AS PID2, EP1.LineNumber&#xA;&#x9;&#x9;&#x9;FROM _ETL_Purchases EP&#xA;&#x9;&#x9;&#x9;LEFT JOIN _ETL_Purchases EP1&#xA;&#x9;&#x9;&#x9;ON EP.PurchaseUID = EP1.PurchaseUID&#xA;&#x9;&#x9;&#x9;AND EP.ItemUID = EP1.ItemUID&#xA;&#x9;&#x9;&#x9;AND EP.FundingSourceUID = EP1.FundingSourceUID&#xA;&#x9;&#x9;&#x9;AND EP.PurchasePrice = EP1.PurchasePrice&#xA;&#x9;&#x9;&#x9;AND EP.LineNumber &lt; EP1.LineNumber&#xA;&#x9;&#x9;) AS P2&#x9;ON P1.PurchaseItemDetailUID = P2.PID1&#xA;&#x9;&#x9;&#x9;AND P1.c &gt; P2.QuantityOrdered&#xA;&#x9;&#x9;&#x9;AND PID2 IS NOT NULL&#xA;&#xA;&#x9;OPEN pidUIDcursor&#xA;&#x9;FETCH NEXT FROM pidUIDcursor INTO @pidUID&#xA;&#xA;&#x9;WHILE @@FETCH_STATUS = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @quantity1 = EP.QuantityOrdered,&#xA;&#x9;&#x9;@purchase = EP.PurchaseUID,&#xA;&#x9;&#x9;@item = EP.ItemUID,&#xA;&#x9;&#x9;@funding = EP.FundingSourceUID,&#xA;&#x9;&#x9;@price = EP.PurchasePrice,&#xA;&#x9;&#x9;@line = EP.LineNumber&#xA;&#x9;&#x9;FROM _ETL_Purchases EP&#xA;&#x9;&#x9;WHERE EP.PurchaseItemDetailUID = @pidUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @lastUID = MAX(temp.ETLInventoryUID)&#xA;&#x9;&#x9;FROM (SELECT TOP(@quantity1)&#xA;&#x9;&#x9;EI.PurchaseItemDetailUID, EI.ETLInventoryUID&#xA;&#x9;&#x9;FROM _ETL_Inventory EI&#xA;&#x9;&#x9;WHERE EI.PurchaseItemDetailUID = @pidUID&#xA;&#x9;&#x9;ORDER BY EI.ETLInventoryUID) AS temp&#xA;&#x9;&#x9;GROUP BY temp.PurchaseItemDetailUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @nextline = MIN(temp.LineNumber)&#xA;&#x9;&#x9;FROM (SELECT EP.PurchaseUID,&#xA;&#x9;&#x9;EP.FundingSourceUID, EP.PurchasePrice,&#xA;&#x9;&#x9;EP.LineNumber&#xA;&#x9;&#x9;FROM _ETL_Purchases EP&#xA;&#x9;&#x9;WHERE EP.PurchaseUID = @purchase&#xA;&#x9;&#x9;AND EP.ItemUID = @item&#xA;&#x9;&#x9;AND EP.FundingSourceUID = @funding&#xA;&#x9;&#x9;AND EP.PurchasePrice = @price&#xA;&#x9;&#x9;AND EP.LineNumber &gt; @line) AS temp&#xA;&#x9;&#x9;GROUP BY temp.PurchaseUID,&#xA;&#x9;&#x9;temp.FundingSourceUID, temp.PurchasePrice&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @nextpidUID = EP.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases EP&#xA;&#x9;&#x9;WHERE EP.PurchaseUID = @purchase&#xA;&#x9;&#x9;AND EP.ItemUID = @item&#xA;&#x9;&#x9;AND EP.FundingSourceUID = @funding&#xA;&#x9;&#x9;AND EP.PurchasePrice = @price&#xA;&#x9;&#x9;AND EP.LineNumber = @nextline&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = @nextpidUID&#xA;&#x9;&#x9;WHERE PurchaseItemDetailUID = @pidUID&#xA;&#x9;&#x9;AND ETLInventoryUID &gt; @lastUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;FETCH NEXT FROM pidUIDcursor INTO @pidUID &#xA;&#x9;END&#xA;&#xA;&#x9;CLOSE pidUIDcursor&#xA;&#x9;DEALLOCATE pidUIDcursor&#xA;END&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityOrdered = ISNULL(Tags.c, 0),&#xA;--LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;--FROM tblTechPurchaseItemDetails AS TPID&#xA;--JOIN (SELECT COUNT(*) AS c, PurchaseItemDetailUID&#xA;--FROM _ETL_Inventory&#xA;--GROUP BY PurchaseItemDetailUID) AS Tags&#xA;--ON TPID.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;--WHERE TPID.QuantityOrdered &lt; ISNULL(Tags.c, 0)&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityReceived = ISNULL(Tags.c, 0),&#xA;--LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;--FROM tblTechPurchaseItemDetails AS TPID&#xA;--JOIN (SELECT COUNT(*) AS c, PurchaseItemDetailUID&#xA;--FROM _ETL_Inventory&#xA;--GROUP BY PurchaseItemDetailUID) AS Tags&#xA;--ON TPID.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;--WHERE TPID.QuantityReceived &lt; ISNULL(Tags.c, 0)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\20 - INSERT TW Purchase Item Details - Opt 17"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{2F8706FD-8525-4A44-9B1F-C3AA7672B49E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="20 - INSERT TW Purchase Item Details - Opt 17"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--20&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 0  -- is 1 as of 3/19/18&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID,&#xA;&#x9;&#x9;StatusUID, SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT Tags.PurchaseUID, Tags.ItemUID, Tags.FundingSourceUID,&#xA;&#x9;&#x9;33, 1, COUNT(*), COUNT(*), Tags.PurchasePrice, NULL, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;WHERE Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.SiteUID &gt; 0&#xA;&#x9;&#x9;AND Tags.PurchaseUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID = 0)&#xA;&#x9;&#x9;GROUP BY Tags.PurchaseUID, Tags.ItemUID,&#xA;&#x9;&#x9;Tags.FundingSourceUID, Tags.PurchasePrice&#xA;&#x9;END&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityOrdered = QuantityReceived&#xA;--WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT P1.PurchaseUID, P1.ItemUID, P1.FundingSourceUID,&#xA;P1.PurchasePrice, P1.LineNumber, P2.PurchaseItemDetailUID&#xA;FROM (SELECT PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice,&#xA;MAX(LineNumber) AS LineNumber&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice) AS P1&#xA;JOIN tblTechPurchaseItemDetails P2&#xA;ON P1.PurchaseUID = P2.PurchaseUID&#xA;AND P1.ItemUID = P2.ItemUID&#xA;AND P1.FundingSourceUID = P2.FundingSourceUID&#xA;AND P1.PurchasePrice = P2.PurchasePrice&#xA;AND P1.LineNumber = P2.LineNumber) AS Purchases&#xA;ON Tags.PurchaseUID = Purchases.PurchaseUID&#xA;AND Tags.ItemUID = Purchases.ItemUID&#xA;AND Tags.FundingSourceUID = Purchases.FundingSourceUID&#xA;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = 0&#xA;WHERE PurchaseItemDetailUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\21 - INSERT TW Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{D6148797-AC31-4F65-8464-39192D263DE6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="21 - INSERT TW Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--21&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET TicketNumber = ''&#xA;WHERE TicketNumber IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketNumber = ''&#xA;WHERE TicketNumber IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketedByUserID = tblUser.UserID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblUser ON UPPER(Purchases.TicketedBy) = UPPER(tblUser.RealName)&#xA;AND tblUser.ApplicationUID = 2&#xA;WHERE Purchases.TicketedBy IS NOT NULL AND Purchases.TicketedBy &lt;&gt; ''&#xA;AND Purchases.TicketedBy &lt;&gt; 'N/A' AND Purchases.TicketedBy &lt;&gt; 'NONE' AND Purchases.TicketedBy &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.TicketedByUserID IS NULL&#xA;OR Purchases.TicketedByUserID &lt;&gt; tblUser.UserID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketedByUserID = 0&#xA;WHERE TicketedByUserID IS NULL&#xA;&#xA;--UPDATE tblTechPurchaseItemShipments&#xA;--SET QuantityShipped = ISNULL(Tags.c, 0), LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;--FROM tblTechPurchaseItemShipments AS TPIS&#xA;--JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;--FROM _ETL_Inventory&#xA;--GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;--ON TPIS.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;--JOIN tblTechPurchaseItemDetails ON TPIS.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;--WHERE TPIS.QuantityShipped &lt; ISNULL(Tags.c, 0)&#xA;&#xA;INSERT INTO tblTechPurchaseItemShipments (PurchaseItemDetailUID, ShippedToSiteUID, TicketNumber, QuantityShipped,&#xA;TicketedByUserID, TicketedDate, StatusUID, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Purchases.PurchaseItemDetailUID, Purchases.ShippedToSiteUID, Purchases.TicketNumber, MAX(ISNULL(Purchases.QuantityShipped, 0)),&#xA;MAX(Purchases.TicketedByUserID), MIN(ISNULL(Purchases.TicketedDate, GETDATE())), 58, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblTechPurchaseItemShipments ON Purchases.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND Purchases.ShippedToSiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;AND Purchases.TicketNumber = tblTechPurchaseItemShipments.TicketNumber&#xA;WHERE Purchases.PurchaseItemDetailUID &gt; 0&#xA;AND Purchases.ShippedToSiteUID &gt; 0&#xA;AND purchases.PurchaseItemShipmentUID IS NULL&#xA;AND tblTechPurchaseItemShipments.PurchaseItemShipmentUID IS NULL&#xA;GROUP BY Purchases.PurchaseItemDetailUID, Purchases.ShippedToSiteUID, Purchases.TicketNumber&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechPurchaseItemShipments ON Purchases.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND Purchases.ShippedToSiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;AND Purchases.TicketNumber = tblTechPurchaseItemShipments.TicketNumber&#xA;WHERE Purchases.PurchaseItemShipmentUID IS NULL&#xA;OR Purchases.PurchaseItemShipmentUID &lt;&gt; tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemShipmentUID = 0&#xA;WHERE PurchaseItemShipmentUID IS NULL&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityReceived = TPIS.Quantity&#xA;--FROM tblTechPurchaseItemDetails AS TPID&#xA;--JOIN (SELECT PurchaseItemDetailUID, SUM(QuantityShipped) AS Quantity&#xA;--FROM tblTechPurchaseItemShipments&#xA;--GROUP BY PurchaseItemDetailUID) AS TPIS&#xA;--ON TPID.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;--WHERE TPIS.Quantity &gt; TPID.QuantityReceived&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityOrdered = QuantityReceived&#xA;--WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET StatusUID = 32&#xA;WHERE QuantityOrdered &gt; QuantityReceived&#xA;AND StatusUID = 33&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\22 - UPDATE ETL&amp; TW Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{8A2C4C20-8F81-4787-AE12-E91F5F0F8DDD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="22 - UPDATE ETL&amp; TW Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--22&#xA;&#xA;--UPDATE _ETL_Inventory&#xA;--SET PurchaseItemShipmentUID = Purchases.PurchaseItemShipmentUID&#xA;--FROM _ETL_Inventory AS Tags&#xA;--JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;--FROM tblTechInventoryHistory GROUP BY InventoryUID) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;--JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;--JOIN _ETL_Purchases AS Purchases ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;--AND tblTechInventoryHistory.SiteUID = Purchases.ShippedToSiteUID&#xA;--WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;&#x9;&#x9;FROM tblTechInventoryHistory GROUP BY InventoryUID&#xA;&#x9;&#x9;) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;JOIN tblTechPurchaseItemShipments TPIS ON Tags.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;AND tblTechInventoryHistory.SiteUID = TPIS.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;--UPDATE _ETL_Inventory&#xA;--SET PurchaseItemShipmentUID = Purchases.PurchaseItemShipmentUID&#xA;--FROM _ETL_Inventory AS Tags&#xA;--JOIN _ETL_Purchases AS Purchases ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;--AND Tags.SiteUID = Purchases.ShippedToSiteUID&#xA;--WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseItemShipments TPIS ON Tags.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;AND Tags.SiteUID = TPIS.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;--UPDATE tblTechPurchaseItemShipments&#xA;--SET QuantityShipped = tpis.QuantityShipped - (tpis3.qty - tpis2.POqty)&#xA;--FROM tblTechPurchaseItemShipments tpis&#xA;--JOIN (SELECT MIN(PurchaseItemShipmentUID) AS PurchaseItemShipmentUID, SUM(QuantityShipped) AS POqty&#xA;--FROM tblTechPurchaseItemShipments&#xA;--GROUP BY PurchaseItemDetailUID, ShippedToSiteUID) AS tpis2&#xA;--ON tpis.PurchaseItemShipmentUID = tpis2.PurchaseItemShipmentUID&#xA;--JOIN _ETL_Purchases ep ON tpis.PurchaseItemDetailUID = ep.PurchaseItemDetailUID&#xA;--AND tpis.ShippedToSiteUID = ep.ShippedToSiteUID&#xA;--LEFT JOIN (SELECT PurchaseItemDetailUID, SUM(QuantityShipped) AS qty&#xA;--FROM tblTechPurchaseItemShipments&#xA;--GROUP BY PurchaseItemDetailUID) AS tpis3 ON tpis.PurchaseItemDetailUID = tpis3.PurchaseItemDetailUID&#xA;--WHERE tpis3.PurchaseItemDetailUID IS NOT NULL&#xA;--AND tpis3.qty &gt; tpis2.POqty&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = ISNULL(Tags.c, 0), LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchaseItemShipments AS TPIS&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;&#x9;&#x9;FROM _ETL_Inventory&#xA;&#x9;&#x9;GROUP BY PurchaseItemShipmentUID&#xA;&#x9;) AS Tags&#xA;&#x9;ON TPIS.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;&#x9;JOIN tblTechPurchaseItemDetails ON TPIS.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;WHERE TPIS.QuantityShipped &lt; ISNULL(Tags.c, 0)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\23 - INSERT TW Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{43E5C206-9EC3-4887-BD9B-E94E6931AB26}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="23 - INSERT TW Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="INSERT INTO tblTechPurchaseItemShipments (PurchaseItemDetailUID, ShippedToSiteUID, TicketNumber, QuantityShipped,&#xA;TicketedByUserID, TicketedDate, StatusUID, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Tags.PurchaseItemDetailUID, Tags.SiteUID, NULL, COUNT(*),&#xA;NULL, NULL, 33, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID &gt; 0&#xA;AND (Tags.PurchaseItemShipmentUID IS NULL&#xA;OR Tags.PurchaseItemShipmentUID = 0)&#xA;GROUP BY Tags.PurchaseItemDetailUID, Tags.SiteUID&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;FROM tblTechInventoryHistory GROUP BY InventoryUID) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;JOIN tblTechPurchaseItemShipments TPIS ON Tags.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;AND tblTechInventoryHistory.SiteUID = TPIS.ShippedToSiteUID&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = 0&#xA;WHERE PurchaseItemShipmentUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\24 - UPDATE_Delete TW Purchase Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{AD46B0D2-5CCF-4DE2-A788-00389EF867D3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="24 - UPDATE_Delete TW Purchase Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DELETE old&#xA;FROM tblTechPurchaseInventory old&#xA;JOIN tblTechInventory TI ON old.InventoryUID = TI.InventoryUID&#xA;WHERE TI.InventorySourceUID = 1&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = tblTechPurchaseInventory.PurchaseInventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseInventory ON Tags.InventoryUID = tblTechPurchaseInventory.InventoryUID&#xA;WHERE Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseInventoryUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseInventory&#xA;SET PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory AS TPI&#xA;JOIN _ETL_Inventory AS Tags ON TPI.PurchaseInventoryUID = Tags.PurchaseInventoryUID&#xA;AND Tags.PurchaseItemShipmentUID &gt; 0&#xA;AND TPI.PurchaseItemShipmentUID &lt;&gt; Tags.PurchaseItemShipmentUID&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseInventory AS old&#xA;JOIN tblTechPurchaseItemShipments ON old.PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails ON tblTechPurchaseItemShipments.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases ON tblTechPurchaseItemDetails.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN _ETL_Inventory AS Tags ON old.PurchaseInventoryUID = Tags.PurchaseInventoryUID&#xA;LEFT JOIN tblTechInventory ON old.InventoryUID = tblTechInventory.InventoryUID&#xA;AND old.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;WHERE tblTechPurchases.Notes LIKE '%ASSET IMPORT%'&#xA;AND Tags.PurchaseInventoryUID IS NULL&#xA;AND tblTechInventory.InventoryUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\25 - UPDATE TW Purchasing Tables"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{39E5758B-4055-4844-9B28-556EB2AEF880}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="25 - UPDATE TW Purchasing Tables"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="INSERT INTO tblTechPurchaseInventory (InventoryUID, PurchaseItemShipmentUID,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Tags.InventoryUID, Tags.PurchaseItemShipmentUID,&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID &gt; 0&#xA;AND Tags.PurchaseItemShipmentUID &gt; 0&#xA;AND (Tags.PurchaseInventoryUID IS NULL&#xA;OR Tags.PurchaseInventoryUID = 0)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = tblTechPurchaseInventory.PurchaseInventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseInventory ON Tags.InventoryUID = tblTechPurchaseInventory.InventoryUID&#xA;WHERE Tags.PurchaseInventoryUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = 0&#xA;WHERE PurchaseInventoryUID IS NULL&#xA;&#xA;--No longer wants updates in tblTechInventory EXCEPT for asset ID&#xA;--UPDATE tblTechInventory&#xA;--SET ItemUID = TPID.ItemUID&#xA;--FROM tblTechInventory AS Inventory&#xA;--JOIN tblTechPurchaseInventory AS TPI ON Inventory.InventoryUID = TPI.InventoryUID&#xA;--JOIN tblTechPurchaseItemShipments AS TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;--JOIN tblTechPurchaseItemDetails AS TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;--WHERE TPID.ItemUID &gt; 0&#xA;--AND Inventory.ItemUID &lt;&gt; TPID.ItemUID&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = EP.QuantityOrdered, QuantityReceived = EP.QuantityReceived&#xA;FROM tblTechPurchaseItemDetails TPID&#xA;JOIN tblTechPurchases ON TPID.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;JOIN _ETL_Purchases EP ON TPID.PurchaseItemDetailUID = EP.PurchaseItemDetailUID&#xA;WHERE tblTechPurchases.Notes LIKE '%DATA IMPORT%'&#xA;AND EP.QuantityOrdered &lt;&gt; TPID.QuantityOrdered&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = TPISJoin.c, QuantityReceived = TPISJoin.c&#xA;FROM tblTechPurchaseItemShipments TPIS&#xA;JOIN (SELECT SUM(QuantityShipped) AS c, PurchaseItemDetailUID&#xA;FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS TPISJoin&#xA;ON TPIS.PurchaseItemDetailUID = TPISJoin.PurchaseItemDetailUID&#xA;JOIN tblTechPurchaseItemDetails TPID&#xA;ON TPISJoin.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;LEFT JOIN _ETL_Purchases EP&#xA;ON TPIS.PurchaseItemDetailUID = EP.PurchaseItemDetailUID&#xA;WHERE TPID.QuantityReceived &gt; TPISJoin.c&#xA;AND EP.PurchaseItemDetailUID IS NULL&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseItemShipments AS old&#xA;JOIN tblTechPurchaseItemDetails ON old.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases ON tblTechPurchaseItemDetails.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Inv ON old.PurchaseItemShipmentUID = Inv.PurchaseItemShipmentUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM _ETL_Purchases&#xA;GROUP BY PurchaseItemShipmentUID) AS Purch ON old.PurchaseItemShipmentUID = Purch.PurchaseItemShipmentUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags ON old.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;WHERE tblTechPurchases.Notes LIKE '%DATA IMPORT%'&#xA;AND Inv.PurchaseItemShipmentUID IS NULL&#xA;AND Purch.PurchaseItemShipmentUID IS NULL&#xA;AND Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseItemDetails AS old&#xA;JOIN tblTechPurchases ON old.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemDetailUID) AS Inv ON old.PurchaseItemDetailUID = Inv.PurchaseItemDetailUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM _ETL_Purchases&#xA;GROUP BY PurchaseItemDetailUID) AS Purch ON old.PurchaseItemDetailUID = Purch.PurchaseItemDetailUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS Tags ON old.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;WHERE tblTechPurchases.Notes LIKE '%DATA IMPORT%'&#xA;AND Inv.PurchaseItemDetailUID IS NULL&#xA;AND Purch.PurchaseItemDetailUID IS NULL&#xA;AND Tags.PurchaseItemDetailUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = ISNULL(Tags.c, 0), StatusUID = 33&#xA;FROM tblTechPurchaseItemShipments TPIS&#xA;LEFT JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON Tags.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails TPID&#xA;ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;WHERE ISNULL(Tags.c, 0) &lt;&gt; QuantityShipped&#xA;AND TP.Notes LIKE '%DATA IMPORT%'&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = TPID.QuantityReceived, StatusUID = 58&#xA;FROM tblTechPurchaseItemShipments TPIS&#xA;JOIN tblTechPurchaseItemDetails TPID&#xA;ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;WHERE TPID.QuantityReceived &gt; TPIS.QuantityShipped&#xA;AND TPIS.PurchaseItemShipmentUID IN&#xA;(SELECT MAX(PurchaseItemShipmentUID) FROM&#xA;tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID&#xA;HAVING COUNT(*) = 1)&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = TPIS.QuantityShipped + EP.QuantityShipped&#xA;- TPISJoin.c, StatusUID = 58&#xA;FROM tblTechPurchaseItemShipments TPIS&#xA;JOIN (SELECT SUM(QuantityShipped) AS c, PurchaseItemDetailUID&#xA;FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS TPISJoin&#xA;ON TPIS.PurchaseItemDetailUID = TPISJoin.PurchaseItemDetailUID&#xA;JOIN tblTechPurchaseItemDetails TPID&#xA;ON TPISJoin.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;JOIN _ETL_Purchases AS EP&#xA;ON TPIS.PurchaseItemShipmentUID = EP.PurchaseItemShipmentUID&#xA;AND TPIS.ShippedToSiteUID = EP.ShippedToSiteUID&#xA;WHERE TPID.QuantityReceived &gt; TPISJoin.c&#xA;AND TPIS.QuantityShipped &lt; EP.QuantityShipped&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityReceived = TPIS.Quantity&#xA;--FROM tblTechPurchaseItemDetails AS TPID&#xA;--JOIN (SELECT PurchaseItemDetailUID, SUM(QuantityShipped) AS Quantity&#xA;--FROM tblTechPurchaseItemShipments&#xA;--GROUP BY PurchaseItemDetailUID) AS TPIS&#xA;--ON TPID.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;--WHERE TPIS.Quantity &gt; TPID.QuantityReceived&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET QuantityOrdered = QuantityReceived&#xA;--WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;--UPDATE tblTechPurchaseItemDetails&#xA;--SET StatusUID = 32&#xA;--WHERE QuantityOrdered &gt; QuantityReceived&#xA;--AND StatusUID = 33&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\26 - Update PO Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{8724D801-A54A-45D8-8DC8-586164D86431}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="26 - Update PO Status"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="--select * &#xA;update tpid set StatusUID = 33&#xA;from _ETL_Purchases epur&#xA;join tblTechPurchaseItemDetails tpid on epur.PurchaseItemDetailUID = tpid.PurchaseItemDetailUID&#xA;where tpid.StatusUID = 32&#xA;and epur.POLineClose = 1&#xA;GO&#xA;&#xA;-----&gt;&gt;&gt; Client change; ignore PO closed and open/close based on PO line closed&#xA;----select * &#xA;--update tpur set StatusUID = 33&#xA;--from _ETL_Purchases epur&#xA;--join tblTechPurchases tpur on epur.PurchaseUID = tpur.PurchaseUID&#xA;--where tpur.StatusUID = 32&#xA;--and epur.PO_Close = 1&#xA;--GO&#xA;&#xA;--select (select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID) as ttlLines,&#xA;--(select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID and statusUID = 33) as ttlClosedLines&#xA;--,* &#xA;update tpur set StatusUID = 33&#xA;from  tblTechPurchases tpur &#xA;where tpur.StatusUID = 32&#xA;and (select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID and statusUID = 33) &gt;=&#xA;(select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID)&#xA;&#xA;&#xA;--select (select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID) as ttlLines,&#xA;--(select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID and statusUID = 33) as ttlClosedLines&#xA;--,* &#xA;update tpur set StatusUID = 32&#xA;from  tblTechPurchases tpur &#xA;where tpur.StatusUID = 33&#xA;and (select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID) &gt;&#xA;(select count(*) from tblTechPurchaseItemDetails where PurchaseUID = tpur.PurchaseUID and statusUID = 33) &#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{58DE664B-836D-4D8D-B9FA-84076CCA4521}"
      DTS:From="Package\01 - INSERT TW Manufacturers"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\02 - INSERT TW Areas" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{CDB7A048-8987-4325-AD54-8D1BE693FCD7}"
      DTS:From="Package\02 - INSERT TW Areas"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\03 - INSERT TW Item Types" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 10]"
      DTS:CreationName=""
      DTS:DTSID="{25333DB6-E4F5-41EC-9D3E-190E2CC07C5E}"
      DTS:From="Package\11 - INSERT TW Vendors &amp; PO - Opt 17"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 10"
      DTS:To="Package\12 - Update ETL Purchase Items &amp; Details - Opt 1 &amp; 17" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 11]"
      DTS:CreationName=""
      DTS:DTSID="{90ACDF6C-C27C-468C-A699-25B907C5194C}"
      DTS:From="Package\12 - Update ETL Purchase Items &amp; Details - Opt 1 &amp; 17"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 11"
      DTS:To="Package\13 - UPDATE Inventory - Opt 15, 6, 16, 18" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 12]"
      DTS:CreationName=""
      DTS:DTSID="{776893F0-4B62-43D4-A406-4DACA22388F0}"
      DTS:From="Package\13 - UPDATE Inventory - Opt 15, 6, 16, 18"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 12"
      DTS:To="Package\14 - UPDATE TW Custom Fields - Opt 7-14" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 13]"
      DTS:CreationName=""
      DTS:DTSID="{AE3AE31A-A640-4483-81CA-984B2FF3A1B6}"
      DTS:From="Package\14 - UPDATE TW Custom Fields - Opt 7-14"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 13"
      DTS:To="Package\15 - INSERT TW Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 14]"
      DTS:CreationName=""
      DTS:DTSID="{B7350116-962E-49E4-8E5A-ADB125FB560C}"
      DTS:From="Package\15 - INSERT TW Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 14"
      DTS:To="Package\16 - INSERT TW Custom Field Values - Opt 7, 9, 11, 13" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 15]"
      DTS:CreationName=""
      DTS:DTSID="{61A0FE49-165F-457C-85D8-3EE23C5C10E2}"
      DTS:From="Package\16 - INSERT TW Custom Field Values - Opt 7, 9, 11, 13"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 15"
      DTS:To="Package\17 -Update ETL Detail Items - Opt 1" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 16]"
      DTS:CreationName=""
      DTS:DTSID="{96BCDB2F-31EC-461D-BD0E-090CABAB3EBB}"
      DTS:From="Package\17 -Update ETL Detail Items - Opt 1"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 16"
      DTS:To="Package\18 - INSERT_Update TW Purchase Details &amp; Inventory - Opt 17" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 17]"
      DTS:CreationName=""
      DTS:DTSID="{D3A86A6E-7655-4DC4-97C9-1E9F916FF93E}"
      DTS:From="Package\18 - INSERT_Update TW Purchase Details &amp; Inventory - Opt 17"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 17"
      DTS:To="Package\19 - UPDATE ETL Purchase Item Details" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 18]"
      DTS:CreationName=""
      DTS:DTSID="{7FBF5953-2E3F-461F-A970-5C6FFE6A83BA}"
      DTS:From="Package\19 - UPDATE ETL Purchase Item Details"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 18"
      DTS:To="Package\20 - INSERT TW Purchase Item Details - Opt 17" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 19]"
      DTS:CreationName=""
      DTS:DTSID="{6E9C78F1-9D3C-42C0-B95D-E0EA63B01892}"
      DTS:From="Package\20 - INSERT TW Purchase Item Details - Opt 17"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 19"
      DTS:To="Package\21 - INSERT TW Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{4B217D09-61B3-48A9-9A96-D95D3F6DDAC1}"
      DTS:From="Package\03 - INSERT TW Item Types"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\04 - INSERT TW Catalog Items  - Opt 1 &amp; 2" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 20]"
      DTS:CreationName=""
      DTS:DTSID="{94F11830-B32F-4775-A607-078BB48A4843}"
      DTS:From="Package\22 - UPDATE ETL&amp; TW Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 20"
      DTS:To="Package\23 - INSERT TW Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 21]"
      DTS:CreationName=""
      DTS:DTSID="{99B2712C-FC9F-4E50-B9A1-CFFA3494F287}"
      DTS:From="Package\21 - INSERT TW Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 21"
      DTS:To="Package\22 - UPDATE ETL&amp; TW Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 22]"
      DTS:CreationName=""
      DTS:DTSID="{6454D22A-C600-4F31-B017-377818FF2534}"
      DTS:From="Package\23 - INSERT TW Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 22"
      DTS:To="Package\24 - UPDATE_Delete TW Purchase Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 23]"
      DTS:CreationName=""
      DTS:DTSID="{663FE7D5-9D41-4886-A53D-BFF528836EC4}"
      DTS:From="Package\24 - UPDATE_Delete TW Purchase Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 23"
      DTS:To="Package\25 - UPDATE TW Purchasing Tables" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 24]"
      DTS:CreationName=""
      DTS:DTSID="{FBC806AA-B13A-4741-BC04-6811321D5E93}"
      DTS:From="Package\00 - Initial Setup - Opt 4, 19, &amp; 20"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 24"
      DTS:To="Package\01 - INSERT TW Manufacturers" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 25]"
      DTS:CreationName=""
      DTS:DTSID="{EC8443D5-1520-489B-BA3E-C2D66FEA2D93}"
      DTS:From="Package\25 - UPDATE TW Purchasing Tables"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 25"
      DTS:To="Package\26 - Update PO Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{086ED23F-E074-44DB-B986-6A52CD12FD19}"
      DTS:From="Package\04 - INSERT TW Catalog Items  - Opt 1 &amp; 2"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\05 - INSERT TW Vendors" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{FFC40C9D-4C32-4EF2-B1FD-8EB3A8AF15EE}"
      DTS:From="Package\05 - INSERT TW Vendors"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\06 - INSERT TW Purchase Orders - Opt 3" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{64F33529-36B1-4246-AE75-0C80B7FD7DFF}"
      DTS:From="Package\06 - INSERT TW Purchase Orders - Opt 3"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\07 - INSERT TW Funding Sources" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{D2AB4AD6-1BB4-4436-B71D-55AE8FB4C8B2}"
      DTS:From="Package\07 - INSERT TW Funding Sources"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\08 - Update ETL Locations - Opt 3" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 7]"
      DTS:CreationName=""
      DTS:DTSID="{FF687452-5C36-46D3-A923-3630874FBAB3}"
      DTS:From="Package\08 - Update ETL Locations - Opt 3"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 7"
      DTS:To="Package\09 - Update ETL Status &amp; Dept - Opt 5" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 8]"
      DTS:CreationName=""
      DTS:DTSID="{79A678F3-5580-4DD9-B553-75999417F655}"
      DTS:From="Package\09 - Update ETL Status &amp; Dept - Opt 5"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 8"
      DTS:To="Package\10 - INSERT TW Funding Sources" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 9]"
      DTS:CreationName=""
      DTS:DTSID="{3E4BF43C-2689-4D41-8B8E-8543DA71EED5}"
      DTS:From="Package\10 - INSERT TW Funding Sources"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 9"
      DTS:To="Package\11 - INSERT TW Vendors &amp; PO - Opt 17" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="244,42"
          Id="Package\00 - Initial Setup - Opt 4, 19, &amp; 20"
          TopLeft="85.8207547169811,22.9528301886793" />
        <NodeLayout
          Size="164,44"
          Id="Package\01 - INSERT TW Manufacturers"
          TopLeft="77.5,104.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\02 - INSERT TW Areas"
          TopLeft="267.952830188679,104.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\03 - INSERT TW Item Types"
          TopLeft="498.405660377359,106.877358490566" />
        <NodeLayout
          Size="177,51"
          Id="Package\04 - INSERT TW Catalog Items  - Opt 1 &amp; 2"
          TopLeft="722.858490566038,94.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\05 - INSERT TW Vendors"
          TopLeft="926.311320754717,100.877358490566" />
        <NodeLayout
          Size="164,51"
          Id="Package\06 - INSERT TW Purchase Orders - Opt 3"
          TopLeft="913.311320754717,171.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\07 - INSERT TW Funding Sources"
          TopLeft="722.858490566038,178.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\08 - Update ETL Locations - Opt 3"
          TopLeft="498.405660377359,181.141509433962" />
        <NodeLayout
          Size="164,52"
          Id="Package\09 - Update ETL Status &amp; Dept - Opt 5"
          TopLeft="267.952830188679,171.141509433962" />
        <NodeLayout
          Size="153,54"
          Id="Package\10 - INSERT TW Funding Sources"
          TopLeft="80.5,167.141509433962" />
        <NodeLayout
          Size="164,49"
          Id="Package\11 - INSERT TW Vendors &amp; PO - Opt 17"
          TopLeft="77.5,253.330188679245" />
        <NodeLayout
          Size="160,60"
          Id="Package\12 - Update ETL Purchase Items &amp; Details - Opt 1 &amp; 17"
          TopLeft="267.952830188679,235.330188679245" />
        <NodeLayout
          Size="164,51"
          Id="Package\13 - UPDATE Inventory - Opt 15, 6, 16, 18"
          TopLeft="498.405660377359,248.330188679245" />
        <NodeLayout
          Size="164,53"
          Id="Package\14 - UPDATE TW Custom Fields - Opt 7-14"
          TopLeft="722.858490566038,243.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\15 - INSERT TW Inventory"
          TopLeft="912.311320754717,243.330188679245" />
        <NodeLayout
          Size="164,64"
          Id="Package\16 - INSERT TW Custom Field Values - Opt 7, 9, 11, 13"
          TopLeft="920.311320754717,313.745283018868" />
        <NodeLayout
          Size="152,58"
          Id="Package\17 -Update ETL Detail Items - Opt 1"
          TopLeft="722.858490566038,312.745283018868" />
        <NodeLayout
          Size="201,60"
          Id="Package\18 - INSERT_Update TW Purchase Details &amp; Inventory - Opt 17"
          TopLeft="489.405660377359,308.745283018868" />
        <NodeLayout
          Size="164,54"
          Id="Package\19 - UPDATE ETL Purchase Item Details"
          TopLeft="272.952830188679,320.745283018868" />
        <NodeLayout
          Size="164,54"
          Id="Package\20 - INSERT TW Purchase Item Details - Opt 17"
          TopLeft="77.5,319.745283018868" />
        <NodeLayout
          Size="164,52"
          Id="Package\21 - INSERT TW Purchase Item Shipments"
          TopLeft="77.5,403.858490566038" />
        <NodeLayout
          Size="164,61"
          Id="Package\22 - UPDATE ETL&amp; TW Purchase Item Shipments"
          TopLeft="267.952830188679,403.820754716981" />
        <NodeLayout
          Size="164,59"
          Id="Package\23 - INSERT TW Purchase Item Shipments"
          TopLeft="493.405660377359,394.858490566038" />
        <NodeLayout
          Size="164,69"
          Id="Package\24 - UPDATE_Delete TW Purchase Inventory"
          TopLeft="722.858490566038,390.858490566038" />
        <NodeLayout
          Size="164,52"
          Id="Package\25 - UPDATE TW Purchasing Tables"
          TopLeft="913.311320754717,402.858490566038" />
        <NodeLayout
          Size="186,42"
          Id="Package\26 - Update PO Status"
          TopLeft="917,501" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="241.235849056604,126.839622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="431.952830188679,127.877358490566">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="66.4528301886793,0"
              Start="0,0"
              End="58.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="58.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 10]"
          TopLeft="241.5,277.830188679245">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.452830188679,-12.5"
              Start="0,0"
              End="18.952830188679,-12.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="9.2264150943395,0" />
                  <mssgle:CubicBezierSegment
                    Point1="9.2264150943395,0"
                    Point2="13.2264150943395,0"
                    Point3="13.2264150943395,-4" />
                  <mssgle:LineSegment
                    End="13.2264150943395,-8.5" />
                  <mssgle:CubicBezierSegment
                    Point1="13.2264150943395,-8.5"
                    Point2="13.2264150943395,-12.5"
                    Point3="17.2264150943395,-12.5" />
                  <mssgle:LineSegment
                    End="18.952830188679,-12.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 11]"
          TopLeft="427.952830188679,265.330188679245">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="70.45283018868,8.5"
              Start="0,0"
              End="62.95283018868,8.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="31.22641509434,0" />
                  <mssgle:CubicBezierSegment
                    Point1="31.22641509434,0"
                    Point2="35.22641509434,0"
                    Point3="35.22641509434,4" />
                  <mssgle:LineSegment
                    End="35.22641509434,4.5" />
                  <mssgle:CubicBezierSegment
                    Point1="35.22641509434,4.5"
                    Point2="35.22641509434,8.5"
                    Point3="39.22641509434,8.5" />
                  <mssgle:LineSegment
                    End="62.95283018868,8.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 12]"
          TopLeft="662.405660377359,271.830188679245">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="60.4528301886792,0"
              Start="0,0"
              End="52.9528301886792,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="52.9528301886792,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 13]"
          TopLeft="886.858490566038,267.580188679245">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="25.4528301886793,0"
              Start="0,0"
              End="17.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="17.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 14]"
          TopLeft="994.311320754717,287.330188679245">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="8.00000000000011,26.4150943396226"
              Start="0,0"
              End="8.00000000000011,18.9150943396226">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,9.20754716981133" />
                  <mssgle:CubicBezierSegment
                    Point1="0,9.20754716981133"
                    Point2="0,13.2075471698113"
                    Point3="4,13.2075471698113" />
                  <mssgle:LineSegment
                    End="4.00000000000011,13.2075471698113" />
                  <mssgle:CubicBezierSegment
                    Point1="4.00000000000011,13.2075471698113"
                    Point2="8.00000000000011,13.2075471698113"
                    Point3="8.00000000000011,17.2075471698113" />
                  <mssgle:LineSegment
                    End="8.00000000000011,18.9150943396226" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 15]"
          TopLeft="920.311320754717,343.745283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-45.4528301886791,0"
              Start="0,0"
              End="-37.9528301886791,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-37.9528301886791,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 16]"
          TopLeft="722.858490566038,340.245283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-32.4528301886789,0"
              Start="0,0"
              End="-24.9528301886789,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-24.9528301886789,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 17]"
          TopLeft="489.405660377359,338.745283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-52.4528301886793,9"
              Start="0,0"
              End="-44.9528301886793,9">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-22.2264150943396,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-22.2264150943396,0"
                    Point2="-26.2264150943396,0"
                    Point3="-26.2264150943396,4" />
                  <mssgle:LineSegment
                    End="-26.2264150943396,5" />
                  <mssgle:CubicBezierSegment
                    Point1="-26.2264150943396,5"
                    Point2="-26.2264150943396,9"
                    Point3="-30.2264150943396,9" />
                  <mssgle:LineSegment
                    End="-44.9528301886793,9" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 18]"
          TopLeft="272.952830188679,347.245283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-31.4528301886793,0"
              Start="0,0"
              End="-23.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-23.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 19]"
          TopLeft="159.5,373.745283018868">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,30.1132075471699"
              Start="0,0"
              End="0,22.6132075471699">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.6132075471699" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="662.405660377359,128.877358490566">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="60.4528301886792,-8.50000000000001"
              Start="0,0"
              End="52.9528301886792,-8.50000000000001">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="26.2264150943396,0" />
                  <mssgle:CubicBezierSegment
                    Point1="26.2264150943396,0"
                    Point2="30.2264150943396,0"
                    Point3="30.2264150943396,-4" />
                  <mssgle:LineSegment
                    End="30.2264150943396,-4.50000000000001" />
                  <mssgle:CubicBezierSegment
                    Point1="30.2264150943396,-4.50000000000001"
                    Point2="30.2264150943396,-8.50000000000001"
                    Point3="34.2264150943396,-8.50000000000001" />
                  <mssgle:LineSegment
                    End="52.9528301886792,-8.50000000000001" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 20]"
          TopLeft="431.952830188679,434.320754716981">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="61.4528301886793,-9.96226415094338"
              Start="0,0"
              End="53.9528301886793,-9.96226415094338">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="26.7264150943396,0" />
                  <mssgle:CubicBezierSegment
                    Point1="26.7264150943396,0"
                    Point2="30.7264150943396,0"
                    Point3="30.7264150943396,-4" />
                  <mssgle:LineSegment
                    End="30.7264150943396,-5.96226415094338" />
                  <mssgle:CubicBezierSegment
                    Point1="30.7264150943396,-5.96226415094338"
                    Point2="30.7264150943396,-9.96226415094338"
                    Point3="34.7264150943396,-9.96226415094338" />
                  <mssgle:LineSegment
                    End="53.9528301886793,-9.96226415094338" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 21]"
          TopLeft="241.5,432.089622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.4528301886793,0"
              Start="0,0"
              End="18.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="18.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 22]"
          TopLeft="657.405660377359,424.858490566038">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="65.4528301886792,0"
              Start="0,0"
              End="57.9528301886792,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="57.9528301886792,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 23]"
          TopLeft="886.858490566038,427.108490566038">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.4528301886791,0"
              Start="0,0"
              End="18.9528301886791,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="18.9528301886791,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 24]"
          TopLeft="207.820754716981,64.9528301886793">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-48.3207547169811,39.9245283018867"
              Start="0,0"
              End="-48.3207547169811,32.4245283018867">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15.9622641509433" />
                  <mssgle:CubicBezierSegment
                    Point1="0,15.9622641509433"
                    Point2="0,19.9622641509433"
                    Point3="-4,19.9622641509433" />
                  <mssgle:LineSegment
                    End="-44.3207547169811,19.9622641509433" />
                  <mssgle:CubicBezierSegment
                    Point1="-44.3207547169811,19.9622641509433"
                    Point2="-48.3207547169811,19.9622641509433"
                    Point3="-48.3207547169811,23.9622641509433" />
                  <mssgle:LineSegment
                    End="-48.3207547169811,32.4245283018867" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 25]"
          TopLeft="997.405660377359,454.858490566038">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,46.141509433962"
              Start="0,0"
              End="0,38.641509433962">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.641509433962" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="899.858490566038,121.627358490566">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.4528301886793,0"
              Start="0,0"
              End="18.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="18.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="1008.31132075472,144.877358490566">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-13,26.2641509433962"
              Start="0,0"
              End="-13,18.7641509433962">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,9.1320754716981" />
                  <mssgle:CubicBezierSegment
                    Point1="0,9.1320754716981"
                    Point2="0,13.1320754716981"
                    Point3="-4,13.1320754716981" />
                  <mssgle:LineSegment
                    End="-9,13.1320754716981" />
                  <mssgle:CubicBezierSegment
                    Point1="-9,13.1320754716981"
                    Point2="-13,13.1320754716981"
                    Point3="-13,17.1320754716981" />
                  <mssgle:LineSegment
                    End="-13,18.7641509433962" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="913.311320754717,198.391509433962">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.4528301886793,0"
              Start="0,0"
              End="-18.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-18.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="722.858490566038,201.641509433962">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-60.4528301886792,0"
              Start="0,0"
              End="-52.9528301886792,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-52.9528301886792,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="498.405660377359,200.141509433962">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-66.4528301886793,0"
              Start="0,0"
              End="-58.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-58.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 8]"
          TopLeft="267.952830188679,195.641509433962">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-34.4528301886793,0"
              Start="0,0"
              End="-26.9528301886793,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-26.9528301886793,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 9]"
          TopLeft="158.25,221.141509433962">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,32.188679245283"
              Start="0,0"
              End="0,24.688679245283">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.688679245283" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="PO = 00, 01, 02, 03, 04, 05, 07, 06, 17, 18, 19, 20, 21"
          ParentId="Package"
          Size="502,40"
          Id="18ba06ec-dd4e-450d-a2be-6cf3738f407c"
          TopLeft="383.292452830189,5.5">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
        <AnnotationLayout
          Text="b"
          ParentId="Package"
          FontInfo="{x:Null}"
          Size="38,42"
          Id="c4934f7f-d080-4b61-b3e1-fc203fad37ef"
          TopLeft="2293,275" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>