<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/22/2014 2:43:54 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="MSANTOS_DEV"
  DTS:CreatorName="HAYESSOFT\mkallen"
  DTS:DTSID="{08FF855C-6E31-47B3-99C4-6BCD00D25390}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.0800.90"
  DTS:LocaleID="1033"
  DTS:ObjectName="DISD_Intg_TipWebImport"
  DTS:PackageType="5"
  DTS:VersionBuild="148"
  DTS:VersionGUID="{2E0D0956-EB18-4A8F-B0B4-26EA48AB0C67}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DBConn]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{87AFC050-BC5F-434F-AF8E-3C40CB40CDCB}"
      DTS:ObjectName="DBConn">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DBName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::Server]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=CSS-NBLAKELY\MSSQLSERVER2014;Initial Catalog=TipWeb_Dallas_0920;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{20F33CD2-278F-463E-BB2D-470F50134A2E}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::DBName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dataDepotDatabase">
      <DTS:VariableValue
        DTS:DataType="8">TipWeb_Dallas_0920</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7E855062-F6C9-44CD-8557-3D9AFDE6FFBF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dataDepotEnvironment">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{F85A87C2-8E9F-42DA-BD81-5D6929E95C78}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[$Project::Server]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="dataDepotServer">
      <DTS:VariableValue
        DTS:DataType="8">CSS-NBLAKELY\MSSQLSERVER2014</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\00 - Initial"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{A6BF2436-C90C-4521-964B-8C526671570D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="00 - Initial"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="-- verify that there is a default room in the table (for every site)&#xA;DECLARE @DEFAULT_ROOM VARCHAR(50)&#xA;DECLARE @ROOMTYPEUID INT&#xA;&#xA;SET @DEFAULT_ROOM = (SELECT ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 4)&#xA;&#xA;IF (SELECT COUNT(*) FROM tblUnvRoomTypes WHERE RoomTypeName = @DEFAULT_ROOM) = 0&#xA;&#x9;INSERT INTO tblUnvRoomTypes (RoomTypeName, RoomTypeDescription,&#xA;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;SELECT @DEFAULT_ROOM, @DEFAULT_ROOM, 0, GETDATE(), 0, GETDATE()&#xA;&#xA;SET @ROOMTYPEUID = (SELECT RoomTypeUID FROM tblUnvRoomTypes WHERE RoomTypeName = @DEFAULT_ROOM)&#xA;&#xA;INSERT INTO tblUnvRooms (RoomNumber, RoomDescription, RoomTypeUID, RoomNotes, SiteUID, Active,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT @DEFAULT_ROOM, @DEFAULT_ROOM, @ROOMTYPEUID, 'Default Room for Imported Inventory',&#xA;Sites.SiteUID, 1, 0, GETDATE(), 0, GETDATE()&#xA;FROM tblTechSites AS Sites&#xA;LEFT JOIN tblUnvRooms AS Rooms ON Sites.SiteUID = Rooms.SiteUID&#xA;AND Rooms.RoomNumber = @DEFAULT_ROOM&#xA;WHERE Rooms.RoomUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 19 AND ETLSettingValue = 'True') = 1&#xA;&#x9;INSERT INTO _ETL_Items (ProductName, Model, Manufacturer, Area)&#x9;&#xA;&#x9;SELECT Purchases.Product, Purchases.Model, Purchases.Manufacturer, Purchases.Area&#xA;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;LEFT JOIN _ETL_Items AS Items&#xA;&#x9;ON UPPER(ISNULL(Purchases.Product, '')) = UPPER(ISNULL(Items.ProductName, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Model, '')) = UPPER(ISNULL(Items.Model, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Manufacturer, '')) = UPPER(ISNULL(Items.Manufacturer, ''))&#xA;&#x9;AND UPPER(ISNULL(Purchases.Area, '')) = UPPER(ISNULL(Items.Area, ''))&#xA;&#x9;WHERE Items.ETLItemUID IS NULL&#xA;&#x9;GROUP BY Purchases.Product, Purchases.Model, Purchases.Manufacturer, Purchases.Area&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 20 AND ETLSettingValue = 'True') = 1&#xA;&#x9;INSERT INTO _ETL_Items (ProductName, Model, Manufacturer, Area)&#xA;&#x9;SELECT Inventory.Product, Inventory.Model, Inventory.Manufacturer, Inventory.Area&#xA;&#x9;FROM _ETL_Inventory AS Inventory&#xA;&#x9;LEFT JOIN _ETL_Items AS Items&#xA;&#x9;ON UPPER(ISNULL(Inventory.Product, '')) = UPPER(ISNULL(Items.ProductName, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Model, '')) = UPPER(ISNULL(Items.Model, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Manufacturer, '')) = UPPER(ISNULL(Items.Manufacturer, ''))&#xA;&#x9;AND UPPER(ISNULL(Inventory.Area, '')) = UPPER(ISNULL(Items.Area, ''))&#xA;&#x9;WHERE Items.ETLItemUID IS NULL&#xA;&#x9;GROUP BY Inventory.Product, Inventory.Model, Inventory.Manufacturer, Inventory.Area&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\01 - INSERT Manufacturers"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{13DAE04D-ED77-42D9-A40D-3966B55ACBD3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="01 - INSERT Manufacturers"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblUnvManufacturers WHERE ManufacturerUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvManufacturers ON &#xA;&#x9;&#x9;INSERT INTO tblUnvManufacturers (ManufacturerUID, ManufacturerName,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvManufacturers OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblUnvManufacturers (ManufacturerName,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.Manufacturer, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblUnvManufacturers ON UPPER(Items.Manufacturer) = UPPER(tblUnvManufacturers.ManufacturerName)&#xA;WHERE Items.Manufacturer IS NOT NULL AND Items.Manufacturer &lt;&gt; ''&#xA;AND Items.Manufacturer &lt;&gt; 'N/A' AND Items.Manufacturer &lt;&gt; 'NONE' AND Items.Manufacturer &lt;&gt; 'UNKNOWN'&#xA;AND tblUnvManufacturers.ManufacturerUID IS NULL&#xA;GROUP BY Items.Manufacturer&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ManufacturerUID = tblUnvManufacturers.ManufacturerUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblUnvManufacturers ON UPPER(Items.Manufacturer) = UPPER(tblUnvManufacturers.ManufacturerName)&#xA;WHERE Items.Manufacturer IS NOT NULL AND Items.Manufacturer &lt;&gt; ''&#xA;AND Items.Manufacturer &lt;&gt; 'N/A' AND Items.Manufacturer &lt;&gt; 'NONE' AND Items.Manufacturer &lt;&gt; 'UNKNOWN'&#xA;AND (Items.ManufacturerUID IS NULL&#xA;OR Items.ManufacturerUID &lt;&gt; tblUnvManufacturers.ManufacturerUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ManufacturerUID = 0&#xA;WHERE ManufacturerUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\02 - INSERT Areas"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{6DB00D12-C3A7-4B4F-B6BF-0FA44BB47EA4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="02 - INSERT Areas"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblUnvAreas WHERE AreaUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvAreas ON &#xA;&#x9;&#x9;INSERT INTO tblUnvAreas (AreaUID, AreaName,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblUnvAreas OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblUnvAreas (AreaName,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.Area, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblUnvAreas ON UPPER(Items.Area) = UPPER(tblUnvAreas.AreaName)&#xA;WHERE Items.Area IS NOT NULL AND Items.Area &lt;&gt; ''&#xA;AND Items.Area &lt;&gt; 'N/A' AND Items.Area &lt;&gt; 'NONE' AND Items.Area &lt;&gt; 'UNKNOWN'&#xA;AND tblUnvAreas.AreaUID IS NULL&#xA;GROUP BY Items.Area&#xA;&#xA;UPDATE _ETL_Items&#xA;SET AreaUID = tblUnvAreas.AreaUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblUnvAreas ON UPPER(Items.Area) = UPPER(tblUnvAreas.AreaName)&#xA;WHERE Items.Area IS NOT NULL AND Items.Area &lt;&gt; ''&#xA;AND Items.Area &lt;&gt; 'N/A' AND Items.Area &lt;&gt; 'NONE' AND Items.Area &lt;&gt; 'UNKNOWN'&#xA;AND (Items.AreaUID IS NULL&#xA;OR Items.AreaUID &lt;&gt; tblUnvAreas.AreaUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET AreaUID = 0&#xA;WHERE AreaUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\03 - INSERT Item Types"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{29030C4F-E087-48F3-BA4E-66B45CC9FFD2}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="03 - INSERT Item Types"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblTechItemTypes WHERE ItemTypeUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes ON &#xA;&#x9;&#x9;INSERT INTO tblTechItemTypes (ItemTypeUID, ItemTypeName, ItemTypeDescription,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 0, GETDATE(), 0, GETDATE())&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblTechItemTypes OFF&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ProductTypeDescription = ''&#xA;WHERE ProductTypeDescription IS NULL&#xA;OR ProductTypeDescription = 'NONE'&#xA;OR ProductTypeDescription = 'N/A'&#xA;OR ProductTypeDescription = 'UNKNOWN'&#xA;&#xA;INSERT INTO tblTechItemTypes (ItemTypeName, ItemTypeDescription,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Items.ProductType,&#xA;CASE WHEN MAX(Items.ProductTypeDescription) &lt;&gt; ''&#xA;THEN MAX(Items.ProductTypeDescription)&#xA;ELSE Items.ProductType END,&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Items AS Items&#xA;LEFT JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND tblTechItemTypes.ItemTypeUID IS NULL&#xA;GROUP BY Items.ProductType&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = tblTechItemTypes.ItemTypeUID&#xA;FROM _ETL_Items AS Items&#xA;JOIN tblTechItemTypes ON UPPER(Items.ProductType) = UPPER(tblTechItemTypes.ItemTypeName)&#xA;WHERE Items.ProductType IS NOT NULL AND Items.ProductType &lt;&gt; ''&#xA;AND Items.ProductType &lt;&gt; 'N/A' AND Items.ProductType &lt;&gt; 'NONE' AND Items.ProductType &lt;&gt; 'UNKNOWN'&#xA;AND (Items.ItemTypeUID IS NULL&#xA;OR Items.ItemTypeUID &lt;&gt; tblTechItemTypes.ItemTypeUID)&#xA;&#xA;UPDATE _ETL_Items&#xA;SET ItemTypeUID = 0&#xA;WHERE ItemTypeUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\04 - INSERT Items"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{E5E7C464-DDEB-40B6-A849-819D2C7D4E5C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="04 - INSERT Items"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Items&#xA;SET Model = ''&#xA;WHERE Model IS NULL&#xA;OR Model = 'N/A'&#xA;OR Model = 'NONE'&#xA;OR Model = 'UNKNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 2 AND ETLSettingValue = 'False') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;DECLARE @PRODNUM AS INT&#xA;&#x9;&#x9;DECLARE @COUNT AS INT&#xA;&#x9;&#x9;SELECT @PRODNUM = Value - 1 FROM tblUnvCounter WHERE CounterUID = 4&#xA;&#x9;&#x9;INSERT INTO tblTechItems (ItemNumber, ItemName, ItemDescription, ItemTypeUID, ModelNumber, ManufacturerUID,&#xA;&#x9;&#x9;ItemSuggestedPrice, AreaUID, ItemNotes, SKU, SerialRequired, ProjectedLife, CustomField1, CustomField2,&#xA;&#x9;&#x9;CustomField3, Active, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT CONVERT(NVARCHAR, ROW_NUMBER() OVER(ORDER BY Items.ProductName, Items.Model) + @PRODNUM),&#xA;&#x9;&#x9;Items.ProductName, MAX(ISNULL(Items.ProductDescription, '')), MAX(ISNULL(Items.ItemTypeUID, 0)),&#xA;&#x9;&#x9;Items.Model, Items.ManufacturerUID, MAX(ISNULL(Items.SuggestedPrice, 0.0)), Items.AreaUID,&#xA;&#x9;&#x9;'CATALOG DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120),&#xA;&#x9;&#x9;MAX(ISNULL(Items.SKU, '')), 0, MAX(ISNULL(Items.ProjectedLife, 0)), MAX(ISNULL(Items.OtherField1, '')),&#xA;&#x9;&#x9;MAX(ISNULL(Items.OtherField2, '')), MAX(ISNULL(Items.OtherField3, '')), 1, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;LEFT JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE tblTechItems.ItemUID IS NULL&#xA;&#x9;&#x9;GROUP BY Items.ProductName, Items.Model, Items.ManufacturerUID, Items.AreaUID&#xA;&#x9;&#x9;SELECT @COUNT = @@ROWCOUNT&#xA;&#x9;&#x9;SELECT @PRODNUM = @PRODNUM + @COUNT&#xA;&#x9;&#x9;IF @COUNT &gt; 0&#xA;&#x9;&#x9;&#x9;BEGIN&#xA;&#x9;&#x9;&#x9;&#x9;UPDATE tblUnvCounter SET Value = @PRODNUM + 1 WHERE CounterUID = 4&#xA;&#x9;&#x9;&#x9;END&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET ItemUID = tblTechItems.ItemUID, ProductNumber = tblTechItems.ItemNumber&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE (Items.ItemUID IS NULL&#xA;&#x9;&#x9;OR Items.ItemUID &lt;&gt; tblTechItems.ItemUID&#xA;&#x9;&#x9;OR Items.ProductNumber IS NULL&#xA;&#x9;&#x9;OR Items.ProductNumber &lt;&gt; tblTechItems.ItemNumber)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechItems (ItemNumber, ItemName, ItemDescription, ItemTypeUID, ModelNumber, ManufacturerUID,&#xA;&#x9;&#x9;ItemSuggestedPrice, AreaUID, ItemNotes, SKU, SerialRequired, ProjectedLife, CustomField1, CustomField2,&#xA;&#x9;&#x9;CustomField3, Active, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT MAX(ISNULL(Items.ProductNumber, '')),&#xA;&#x9;&#x9;Items.ProductName, MAX(ISNULL(Items.ProductDescription, '')), MAX(ISNULL(Items.ItemTypeUID, 0)),&#xA;&#x9;&#x9;Items.Model, Items.ManufacturerUID, MAX(ISNULL(Items.SuggestedPrice, 0.0)), Items.AreaUID,&#xA;&#x9;&#x9;'CATALOG DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120),&#xA;&#x9;&#x9;MAX(ISNULL(Items.SKU, '')), 0, MAX(ISNULL(Items.ProjectedLife, 0)), MAX(ISNULL(Items.OtherField1, '')),&#xA;&#x9;&#x9;MAX(ISNULL(Items.OtherField2, '')), MAX(ISNULL(Items.OtherField3, '')), 1, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;LEFT JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE tblTechItems.ItemUID IS NULL&#xA;&#x9;&#x9;GROUP BY Items.ProductName, Items.Model, Items.ManufacturerUID, Items.AreaUID&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET ItemUID = tblTechItems.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Items AS Items&#xA;&#x9;&#x9;JOIN tblTechItems ON UPPER(Items.ProductName) = UPPER(tblTechItems.ItemName)&#xA;&#x9;&#x9;AND UPPER(Items.Model) = UPPER(ISNULL(tblTechItems.ModelNumber, ''))&#xA;&#x9;&#x9;AND Items.ManufacturerUID = tblTechItems.ManufacturerUID&#xA;&#x9;&#x9;AND Items.AreaUID = tblTechItems.AreaUID&#xA;&#x9;&#x9;WHERE (Items.ItemUID IS NULL&#xA;&#x9;&#x9;OR Items.ItemUID &lt;&gt; tblTechItems.ItemUID)&#xA;&#x9;END&#xA;&#x9;&#xA;UPDATE _ETL_Items&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET Product = ProductName&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Items&#xA;&#x9;&#x9;SET Product = ProductNumber&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\05 - INSERT Vendors"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{99D7CFD2-D00D-4814-96E1-8225BEF8A082}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="05 - INSERT Vendors"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblVendor WHERE VendorID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor ON &#xA;&#x9;&#x9;INSERT INTO tblVendor (VendorID, VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;&#x9;&#x9;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;&#x9;&#x9;NULL, NULL, NULL, 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblVendor (VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;SELECT Purchases.Vendor, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;NULL, MIN(Purchases.VendorAccountNumber), NULL, 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 2&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblVendor ON UPPER(Purchases.Vendor) = UPPER(tblVendor.VendorName)&#xA;AND tblVendor.ApplicationUID = 2&#xA;WHERE Purchases.Vendor IS NOT NULL AND Purchases.Vendor &lt;&gt; ''&#xA;AND Purchases.Vendor &lt;&gt; 'N/A' AND Purchases.Vendor &lt;&gt; 'NONE' AND Purchases.Vendor &lt;&gt; 'UNKNOWN'&#xA;AND tblVendor.VendorID IS NULL&#xA;GROUP BY Purchases.Vendor&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET VendorUID = tblVendor.VendorID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblVendor ON UPPER(Purchases.Vendor) = UPPER(tblVendor.VendorName)&#xA;AND tblVendor.ApplicationUID = 2&#xA;WHERE Purchases.Vendor IS NOT NULL AND Purchases.Vendor &lt;&gt; ''&#xA;AND Purchases.Vendor &lt;&gt; 'N/A' AND Purchases.Vendor &lt;&gt; 'NONE' AND Purchases.Vendor &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.VendorUID IS NULL&#xA;OR Purchases.VendorUID &lt;&gt; tblVendor.VendorID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET VendorUID = 0&#xA;WHERE VendorUID IS NULL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\06 - INSERT Purchase Orders"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{90DA021A-B312-4FA2-859E-A8EB6556EB50}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="06 - INSERT Purchase Orders"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Purchases&#xA;SET PurchaseOrder = ''&#xA;WHERE PurchaseOrder IS NULL&#xA;OR PurchaseOrder = 'N/A'&#xA;OR PurchaseOrder = 'NONE'&#xA;OR PurchaseOrder = 'UNKNOWN'&#xA;OR PurchaseOrder = 'NOT KNOWN'&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseUID = tblTechPurchases.PurchaseUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechPurchases ON UPPER(Purchases.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Purchases.PurchaseOrder &lt;&gt; ''&#xA;AND Purchases.PurchaseUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 3 AND ETLSettingValue = 'SiteID') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.Site) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.SiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteAddedSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.SiteAdded) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.SiteAddedSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteAddedSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ShippedToSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.ShippedToSite) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Purchases.ShippedToSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ShippedToSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.Site) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.SiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET SiteAddedSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.SiteAdded) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.SiteAddedSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.SiteAddedSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ShippedToSiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Purchases.ShippedToSite) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Purchases.ShippedToSiteUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ShippedToSiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET SiteUID = 1&#xA;WHERE SiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET SiteAddedSiteUID = 1&#xA;WHERE SiteAddedSiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET ShippedToSiteUID = 0&#xA;WHERE ShippedToSiteUID IS NULL&#xA;&#xA;INSERT INTO tblTechPurchases (StatusUID, VendorUID, SiteUID, OrderNumber, PurchaseDate,&#xA;EstimatedDeliveryDate, Notes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate, Other1)&#xA;SELECT 32, MAX(Purchases.VendorUID), MIN(Purchases.SiteUID), Purchases.PurchaseOrder,&#xA;MIN(ISNULL(Purchases.PurchaseDate, GETDATE())), MIN(ISNULL(Purchases.DeliveryDate, GETDATE())),&#xA;LTRIM(ISNULL(MAX(Purchases.Notes), '') + ' ' + 'DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120)),&#xA;0, GETDATE(), 0, GETDATE(), MAX(Purchases.Other1)&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblTechPurchases ON UPPER(Purchases.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Purchases.PurchaseOrder &lt;&gt; ''&#xA;AND tblTechPurchases.PurchaseUID IS NULL&#xA;GROUP BY Purchases.PurchaseOrder&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseUID = tblTechPurchases.PurchaseUID, New = 1&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechPurchases ON UPPER(Purchases.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Purchases.PurchaseOrder &lt;&gt; ''&#xA;AND Purchases.PurchaseUID IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseUID = 0&#xA;WHERE PurchaseUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\07 - INSERT Funding Sources"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{BE2CB9CB-B3B0-4FA0-A209-924BADC7E2D5}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="07 - INSERT Funding Sources"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblFundingSources WHERE FundingSourceUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources ON &#xA;&#x9;&#x9;INSERT INTO tblFundingSources (FundingSourceUID, FundingSource, FundingDesc, Active, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 1, 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblFundingSources (FundingSource, FundingDesc, Active, ApplicationUID)&#xA;SELECT Purchases.FundingSource, MAX(ISNULL(Purchases.FundingSourceDescription, '')), 1, 2&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblFundingSources ON UPPER(Purchases.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Purchases.FundingSource IS NOT NULL AND Purchases.FundingSource &lt;&gt; ''&#xA;AND Purchases.FundingSource &lt;&gt; 'N/A' AND Purchases.FundingSource &lt;&gt; 'NONE' AND Purchases.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND tblFundingSources.FundingSourceUID IS NULL&#xA;GROUP BY Purchases.FundingSource&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET FundingSourceUID = tblFundingSources.FundingSourceUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblFundingSources ON UPPER(Purchases.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Purchases.FundingSource IS NOT NULL AND Purchases.FundingSource &lt;&gt; ''&#xA;AND Purchases.FundingSource &lt;&gt; 'N/A' AND Purchases.FundingSource &lt;&gt; 'NONE' AND Purchases.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.FundingSourceUID IS NULL&#xA;OR Purchases.FundingSourceUID &lt;&gt; tblFundingSources.FundingSourceUID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET FundingSourceUID = 0&#xA;WHERE FundingSourceUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\08 - INSERT Locations"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{E2D09F08-A2A3-4B6A-96E7-81D375B27A58}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="08 - INSERT Locations"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET Location = ''&#xA;WHERE Location IS NULL&#xA;OR Location = 'N/A'&#xA;OR Location = 'NONE'&#xA;OR Location = 'UNKNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 3 AND ETLSettingValue = 'SiteID') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Tags.Site) = UPPER(tblTechSites.SiteName)&#xA;&#x9;&#x9;WHERE (Tags.SiteUID IS NULL&#xA;&#x9;&#x9;OR Tags.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET SiteUID = tblTechSites.SiteUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechSites ON UPPER(Tags.Site) = UPPER(tblTechSites.SiteID)&#xA;&#x9;&#x9;WHERE (Tags.SiteUID IS NULL&#xA;&#x9;&#x9;OR Tags.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET SiteUID = 1&#xA;WHERE SiteUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = ISNULL(tblTeachers.TeachersUID, 0)&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;LEFT JOIN tblTeachers ON tblTechSites.SiteID = tblTeachers.CampusID&#xA;AND Tags.Location = tblTeachers.TeacherID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL&#xA;OR Tags.EntityUID &lt;&gt; ISNULL(tblTeachers.TeachersUID, 0))&#xA;AND Tags.EntityTypeUID = 3&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = ISNULL(tblStudents.StudentsUID, 0)&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;LEFT JOIN tblStudents ON tblTechSites.SiteID = tblStudents.CampusID&#xA;AND Tags.Location = tblStudents.StudentID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL&#xA;OR Tags.EntityUID &lt;&gt; ISNULL(tblStudents.StudentsUID, 0))&#xA;AND Tags.EntityTypeUID = 4&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET Location = '', EntityTypeUID = 2&#xA;WHERE EntityUID = 0&#xA;&#xA;DECLARE @LOCATION AS VARCHAR(50)&#xA;SELECT @LOCATION = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 4&#xA;IF @LOCATION IS NOT NULL&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET Location = @LOCATION&#xA;&#x9;&#x9;WHERE Location = ''&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = tblUnvRooms.RoomUID, EntityTypeUID = 2&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblUnvRooms ON UPPER(Tags.Location) = UPPER(tblUnvRooms.RoomNumber)&#xA;AND Tags.SiteUID = tblUnvRooms.SiteUID&#xA;WHERE Tags.SiteUID &gt; 1&#xA;AND (Tags.EntityUID IS NULL&#xA;OR Tags.EntityUID &lt;&gt; tblUnvRooms.RoomUID)&#xA;AND (Tags.EntityTypeUID IS NULL&#xA;OR Tags.EntityTypeUID = 2)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET EntityUID = 0, EntityTypeUID = 0&#xA;WHERE EntityUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\09 - INSERT Status"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{98635F9E-47F5-4901-803E-D4CEA92DD6C7}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="09 - INSERT Status"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @STATUS AS VARCHAR(50)&#xA;SELECT @STATUS = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 5&#xA;UPDATE _ETL_Inventory&#xA;SET Status = @STATUS&#xA;WHERE Status IS NULL&#xA;OR Status NOT IN ('In Use', 'Available')&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET statusID = 26&#xA;WHERE Status = 'Available'&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET statusID = 28&#xA;WHERE Status = 'In Use'&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET TechDepartmentUID = tblTechDepartments.TechDepartmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechDepartments ON UPPER(Tags.Department) = UPPER(tblTechDepartments.DepartmentName)&#xA;WHERE Tags.Department IS NOT NULL AND Tags.Department &lt;&gt; ''&#xA;AND Tags.Department &lt;&gt; 'N/A' AND Tags.Department &lt;&gt; 'NONE' AND Tags.Department &lt;&gt; 'UNKNOWN'&#xA;AND (Tags.TechDepartmentUID IS NULL&#xA;OR Tags.TechDepartmentUID &lt;&gt; tblTechDepartments.TechDepartmentUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET TechDepartmentUID = 0&#xA;WHERE TechDepartmentUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\10 - INSERT Funding Sources"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{38E4271D-35EC-437A-8868-38912667E566}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="10 - INSERT Funding Sources"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM tblFundingSources WHERE FundingSourceUID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources ON &#xA;&#x9;&#x9;INSERT INTO tblFundingSources (FundingSourceUID, FundingSource, FundingDesc, Active, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, 1, 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblFundingSources OFF&#xA;&#x9;END&#xA;&#xA;INSERT INTO tblFundingSources (FundingSource, FundingDesc, Active, ApplicationUID)&#xA;SELECT Tags.FundingSource, MAX(ISNULL(Tags.FundingSourceDescription, '')), 1, 2&#xA;FROM _ETL_Inventory AS Tags&#xA;LEFT JOIN tblFundingSources ON UPPER(Tags.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Tags.FundingSource IS NOT NULL AND Tags.FundingSource &lt;&gt; ''&#xA;AND Tags.FundingSource &lt;&gt; 'N/A' AND Tags.FundingSource &lt;&gt; 'NONE' AND Tags.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND tblFundingSources.FundingSourceUID IS NULL&#xA;GROUP BY Tags.FundingSource&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET FundingSourceUID = tblFundingSources.FundingSourceUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblFundingSources ON UPPER(Tags.FundingSource) = UPPER(tblFundingSources.FundingSource)&#xA;AND tblFundingSources.ApplicationUID = 2&#xA;WHERE Tags.FundingSource IS NOT NULL AND Tags.FundingSource &lt;&gt; ''&#xA;AND Tags.FundingSource &lt;&gt; 'N/A' AND Tags.FundingSource &lt;&gt; 'NONE' AND Tags.FundingSource &lt;&gt; 'UNKNOWN'&#xA;AND (Tags.FundingSourceUID IS NULL&#xA;OR Tags.FundingSourceUID &lt;&gt; tblFundingSources.FundingSourceUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET FundingSourceUID = 0&#xA;WHERE FundingSourceUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\11 - INSERT Purchase Orders"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{BB0A384E-6E39-4DA4-BE13-7809C7842F4C}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="11 - INSERT Purchase Orders"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET PurchaseOrder = ''&#xA;WHERE PurchaseOrder IS NULL&#xA;OR PurchaseOrder = 'N/A'&#xA;OR PurchaseOrder = 'NONE'&#xA;OR PurchaseOrder = 'UNKNOWN'&#xA;OR PurchaseOrder = 'NOT KNOWN'&#xA;&#xA;IF (SELECT COUNT(*) FROM tblVendor WHERE VendorID = 0) = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor ON &#xA;&#x9;&#x9;INSERT INTO tblVendor (VendorID, VendorName, Contact, Address, Address2, City, State, Zip, Phone, Fax,&#xA;&#x9;&#x9;Email, AccountNumber, CampusID, Notes, Active, UserID, ModifiedDate, ApplicationUID)&#xA;&#x9;&#x9;VALUES (0, 'NONE', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,&#xA;&#x9;&#x9;NULL, NULL, NULL, 'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 1, 0, GETDATE(), 0)&#xA;&#x9;&#x9;SET IDENTITY_INSERT tblVendor OFF&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = _ETL_Purchases.PurchaseUID, InventoryTypeUID = 2,&#xA;FundingSourceUID = _ETL_Purchases.FundingSourceUID, PurchaseDate = _ETL_Purchases.PurchaseDate&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN _ETL_Purchases ON UPPER(Tags.PurchaseOrder) = UPPER(_ETL_Purchases.PurchaseOrder)&#xA;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;AND Tags.PurchaseUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechPurchases (StatusUID, VendorUID, SiteUID, OrderNumber, PurchaseDate,&#xA;&#x9;&#x9;EstimatedDeliveryDate, Notes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT 33, 0, MIN(Tags.SiteUID), Tags.PurchaseOrder,&#xA;&#x9;&#x9;MIN(ISNULL(Tags.PurchaseDate, GETDATE())), NULL,&#xA;&#x9;&#x9;'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchases ON UPPER(Tags.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;&#x9;&#x9;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;&#x9;&#x9;AND tblTechPurchases.PurchaseUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.PurchaseOrder&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = tblTechPurchases.PurchaseUID, InventoryTypeUID = 2&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchases ON UPPER(Tags.PurchaseOrder) = UPPER(tblTechPurchases.OrderNumber)&#xA;WHERE Tags.PurchaseOrder &lt;&gt; ''&#xA;AND Tags.PurchaseUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseUID = 0, InventoryTypeUID = 1&#xA;WHERE PurchaseUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\12 - INSERT Items"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{284D9338-FFB6-469B-8A66-2F5BECA4741B}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="12 - INSERT Items"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Tags.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;AND UPPER(ISNULL(Tags.Model, '')) = UPPER(ISNULL(_ETL_Items.Model, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Tags.Manufacturer, '')) = UPPER(ISNULL(_ETL_Items.Manufacturer, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Tags.Area, '')) = UPPER(ISNULL(_ETL_Items.Area, ''))&#xA;&#x9;&#x9;WHERE _ETL_Items.ItemUID &gt; 0&#xA;&#x9;&#x9;AND Tags.Product IS NOT NULL AND Tags.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Tags.Product &lt;&gt; 'N/A' AND Tags.Product &lt;&gt; 'NONE' AND Tags.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Tags.ItemUID IS NULL&#xA;&#x9;&#x9;OR Tags.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET ItemUID = Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT MIN(ItemUID) AS ItemUID, Product&#xA;&#x9;&#x9;FROM _ETL_Items&#xA;&#x9;&#x9;GROUP BY Product) AS Items&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Items.Product)&#xA;&#x9;&#x9;WHERE Tags.ItemUID IS NULL&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Tags.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;WHERE Tags.Product IS NOT NULL AND Tags.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Tags.Product &lt;&gt; 'N/A' AND Tags.Product &lt;&gt; 'NONE' AND Tags.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Tags.ItemUID IS NULL&#xA;&#x9;&#x9;OR Tags.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;WHERE PID.LineNumber &gt; 0&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN (SELECT P.OrderNumber, I.ItemName, PID.PurchasePrice,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName, PID.PurchasePrice) AS Purchases&#xA;&#x9;&#x9;ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;&#x9;&#x9;AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;&#x9;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;&#x9;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemUID = Purchases.ItemUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseItemDetails AS Purchases&#xA;ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;WHERE Purchases.ItemUID &gt; 0&#xA;AND (Tags.ItemUID IS NULL&#xA;OR Tags.ItemUID &lt;&gt; Purchases.ItemUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\13 - UPDATE Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{4313D14F-2583-4CD3-A7DF-3A663BA768C4}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="13 - UPDATE Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET Serial = ''&#xA;WHERE Serial IS NULL&#xA;OR Serial = 'N/A'&#xA;OR Serial = 'NONE'&#xA;OR Serial = 'UNKNOWN'&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = tblTechInventory.InventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.AssetID) = UPPER(tblTechInventory.AssetID)&#xA;WHERE (Tags.InventoryUID IS NULL&#xA;OR Tags.InventoryUID &lt;&gt; tblTechInventory.InventoryUID)&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 15 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryUID = tblTechInventory.InventoryUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;&#x9;&#x9;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET AssetID = Tags.AssetID&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.AssetID IS NULL&#xA;&#x9;END&#xA;&#xA;--InventoryUID set to -1 means Tag already exists in TIPWeb&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = -1&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 6 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Tag = Tags.Tag,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Tag &lt;&gt; Tags.Tag&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Serial = Tags.Serial,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Serial &lt;&gt; Tags.Serial&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 16 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND TI.ItemUID &lt;&gt; Tags.ItemUID&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchaseInventory TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.PurchaseUID = 0&#xA;&#x9;&#x9;AND TPI.PurchaseInventoryUID IS NULL&#xA;&#x9;&#x9;AND Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND TI.ItemUID = 0&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 18 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET FundingSourceUID = Tags.FundingSourceUID,&#xA;&#x9;&#x9;PurchasePrice = Tags.PurchasePrice, PurchaseDate = Tags.PurchaseDate,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.FundingSourceUID &lt;&gt; Tags.FundingSourceUID&#xA;&#x9;&#x9;OR TI.PurchasePrice &lt;&gt; Tags.PurchasePrice&#xA;&#x9;&#x9;OR TI.PurchaseDate &lt;&gt; Tags.PurchaseDate&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NULL AND Tags.PurchasePrice IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NOT NULL AND Tags.PurchasePrice IS NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NULL AND Tags.PurchaseDate IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NOT NULL AND Tags.PurchaseDate IS NULL)&#xA;&#x9;END&#xA;&#xA;UPDATE tblTechInventory&#xA;SET InventoryTypeUID = Tags.InventoryTypeUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventory AS TI&#xA;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;WHERE TI.InventoryTypeUID &lt;&gt; Tags.InventoryTypeUID&#xA;&#xA;UPDATE tblTechInventoryHistory&#xA;SET InventoryTypeUID = tblTechInventory.InventoryTypeUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventoryHistory AS TIH&#xA;JOIN tblTechInventory ON TIH.InventoryUID = tblTechInventory.InventoryUID&#xA;WHERE TIH.InventoryTypeUID &lt;&gt; tblTechInventory.InventoryTypeUID&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\14 - UPDATE Inventory Custom"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{E7990EC6-8F21-4E97-A1B3-30B7DB0B306D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="14 - UPDATE Inventory Custom"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @Label VARCHAR(50)&#xA;DECLARE @Type VARCHAR(50)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemTypeUID = tblTechItems.ItemTypeUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechItems ON Tags.ItemUID = tblTechItems.ItemUID&#xA;WHERE Tags.ItemTypeUID IS NULL&#xA;OR (Tags.ItemTypeUID &lt;&gt; tblTechItems.ItemTypeUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemTypeUID = 0&#xA;WHERE ItemTypeUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 7 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta1UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 7&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 8&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt1UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField1&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta1UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField1&#xA;&#x9;&#x9;AND Tags.CustomField1 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta1UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt1UID&#xA;&#x9;&#x9;AND Tags.InventoryExt1UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta1UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 9 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta2UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 9&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 10&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt2UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField2&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta2UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField2&#xA;&#x9;&#x9;AND Tags.CustomField2 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta2UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt2UID&#xA;&#x9;&#x9;AND Tags.InventoryExt2UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta2UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 11 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta3UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 11&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 12&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt3UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField3&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta3UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField3&#xA;&#x9;&#x9;AND Tags.CustomField3 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta3UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt3UID&#xA;&#x9;&#x9;AND Tags.InventoryExt3UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta3UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID IS NOT NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 13 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta4UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 13&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 14&#xA;&#x9;&#x9;UPDATE tblTechInventoryMeta&#xA;&#x9;&#x9;SET InventoryMetaLabel = @Label, InventoryMetaType = @Type&#xA;&#x9;&#x9;FROM tblTechInventoryMeta&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryMeta.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (tblTechInventoryMeta.InventoryMetaLabel &lt;&gt; @Label&#xA;&#x9;&#x9;OR tblTechInventoryMeta.InventoryMetaType &lt;&gt; @Type)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory as Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt4UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventoryExt&#xA;&#x9;&#x9;SET InventoryExtValue = Tags.CustomField4&#xA;&#x9;&#x9;FROM tblTechInventoryExt&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON tblTechInventoryExt.InventoryMetaUID = Tags.InventoryMeta4UID&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtValue &lt;&gt; Tags.CustomField4&#xA;&#x9;&#x9;AND Tags.CustomField4 IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryExt AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;AND old.InventoryMetaUID = Tags.InventoryMeta4UID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryExtUID &lt;&gt; Tags.InventoryExt4UID&#xA;&#x9;&#x9;AND Tags.InventoryExt4UID IS NOT NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;DELETE old&#xA;&#x9;&#x9;FROM tblTechInventoryMeta AS old&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON old.ItemTypeUID = Tags.ItemTypeUID&#xA;&#x9;&#x9;AND old.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND old.InventoryMetaUID &lt;&gt; Tags.InventoryMeta4UID&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID IS NOT NULL&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\15 - INSERT Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{C1040114-6D91-4DD8-8EFD-0E5853492517}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="15 - INSERT Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET SiteUID = tblTechSites.SiteUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechSites ON Tags.SiteUID = tblTechSites.SiteUID&#xA;WHERE (Tags.SiteUID IS NULL&#xA;OR Tags.SiteUID &lt;&gt; tblTechSites.SiteUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET SiteUID = 0&#xA;WHERE SiteUID IS NULL&#xA;&#xA;INSERT INTO tblTechInventory (InventoryTypeUID, ItemUID, SiteUID, EntityUID, EntityTypeUID, StatusUID,&#xA;Tag, Serial, FundingSourceUID, PurchasePrice, PurchaseDate, ExpirationDate, InventoryNotes,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate, AssetID)&#xA;SELECT CASE WHEN Tags.PurchaseUID = 0 THEN 1 ELSE 2 END,&#xA;Tags.ItemUID, Tags.SiteUID, Tags.EntityUID, 2, Tags.StatusID,&#xA;Tags.Tag, Tags.Serial, Tags.FundingSourceUID, Tags.PurchasePrice, Tags.PurchaseDate,&#xA;Tags.ExpirationDate, Tags.InventoryNotes, 0, GETDATE(), 0, GETDATE(), Tags.AssetID&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.ItemUID &gt; 0&#xA;AND Tags.SiteUID &gt; 1&#xA;AND Tags.EntityUID &gt; 0&#xA;AND Tags.InventoryUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = tblTechInventory.InventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON Tags.Tag = tblTechInventory.Tag&#xA;WHERE Tags.InventoryUID IS NULL&#xA;OR (Tags.InventoryUID &gt; 0&#xA;AND Tags.InventoryUID &lt;&gt; tblTechInventory.InventoryUID)&#xA;&#xA;--InventoryUID set to 0 means Unknown Error&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = 0&#xA;WHERE InventoryUID IS NULL&#xA;&#xA;INSERT INTO tblTechInventoryHistory (InventoryUID, InventoryTypeUID,&#xA;SiteUID, EntityUID, EntityTypeUID, StatusUID,&#xA;OriginSiteUID, OriginStatusUID, OriginEntityUID, OriginEntityTypeUID,&#xA;InventoryHistoryNotes, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT tblTechInventory.InventoryUID, tblTechInventory.InventoryTypeUID,&#xA;tblTechInventory.SiteUID, tblTechInventory.EntityUID, 2, tblTechInventory.StatusUID,&#xA;tblTechInventory.SiteUID, tblTechInventory.StatusUID, tblTechInventory.EntityUID, 2,&#xA;'ASSET DATA IMPORT ' + CONVERT(NVARCHAR(10), GETDATE(), 120), 0, GETDATE(), 0, GETDATE()&#xA;FROM tblTechInventory&#xA;LEFT JOIN tblTechInventoryHistory ON tblTechInventory.InventoryUID = tblTechInventoryHistory.InventoryUID&#xA;WHERE tblTechInventoryHistory.InventoryHistoryUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\16 - INSERT Inventory Custom"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{6081B8B9-A65D-4F9B-9654-E573C397C6C8}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="16 - INSERT Inventory Custom"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="DECLARE @Label VARCHAR(50)&#xA;DECLARE @Type VARCHAR(50)&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 7 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 7&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 8&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 1&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 1&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta1UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta1UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta1UID, Tags.CustomField1&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta1UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta1UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt1UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt1UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt1UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt1UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 9 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 9&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 10&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 2&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 2&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta2UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta2UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta1UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta2UID, Tags.CustomField2&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta2UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta2UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt2UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt2UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt2UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt2UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 11 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 11&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 12&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 3&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID IS NOT NULL&#xA;&#x9;&#x9;AND Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 3&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta3UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta3UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta3UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta3UID, Tags.CustomField3&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta3UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta3UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt3UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt3UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt3UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt3UID IS NULL&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 13 AND ETLSettingValue &lt;&gt; '') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;SELECT @Label = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 13&#xA;&#x9;&#x9;SELECT @Type = ETLSettingValue FROM _ETL_Settings WHERE ETLSettingUID = 14&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryMeta (ItemTypeUID, InventoryMetaLabel,&#xA;&#x9;&#x9;InventoryMetaType, InventoryMetaRequired, InventoryMetaOrder)&#xA;&#x9;&#x9;SELECT Tags.ItemTypeUID, @Label, @Type, 0, 4&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID IS NOT NULL&#xA;&#x9;&#x9;AND Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaUID IS NULL&#xA;&#x9;&#x9;GROUP BY Tags.ItemTypeUID&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = tblTechInventoryMeta.InventoryMetaUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryMeta ON Tags.ItemTypeUID = tblTechInventoryMeta.ItemTypeUID&#xA;&#x9;&#x9;AND tblTechInventoryMeta.InventoryMetaOrder = 4&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryMeta4UID &lt;&gt; tblTechInventoryMeta.InventoryMetaUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryMeta4UID = 0&#xA;&#x9;&#x9;WHERE InventoryMeta4UID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;&#x9;&#x9;SELECT Tags.InventoryUID, Tags.InventoryMeta4UID, Tags.CustomField4&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;LEFT JOIN tblTechInventoryExt ON Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;WHERE Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryMeta4UID &gt; 0&#xA;&#x9;&#x9;AND tblTechInventoryExt.InventoryExtUID IS NULL&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = tblTechInventoryExt.InventoryExtUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventoryExt ON Tags.InventoryMeta4UID = tblTechInventoryExt.InventoryMetaUID&#xA;&#x9;&#x9;AND Tags.InventoryUID = tblTechInventoryExt.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemTypeUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.InventoryExt4UID IS NULL&#xA;&#x9;&#x9;OR Tags.InventoryExt4UID &lt;&gt; tblTechInventoryExt.InventoryExtUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryExt4UID = 0&#xA;&#x9;&#x9;WHERE InventoryExt4UID IS NULL&#xA;&#x9;END&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\17 - INSERT Items"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{3D79A13D-205B-4E17-AF7F-BD44FFBB8A53}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="17 - INSERT Items"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 1 AND ETLSettingValue = 'ProductNumber') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Purchases.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Model, '')) = UPPER(ISNULL(_ETL_Items.Model, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Manufacturer, '')) = UPPER(ISNULL(_ETL_Items.Manufacturer, ''))&#xA;&#x9;&#x9;AND UPPER(ISNULL(Purchases.Area, '')) = UPPER(ISNULL(_ETL_Items.Area, ''))&#xA;&#x9;&#x9;WHERE Purchases.Product IS NOT NULL AND Purchases.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Purchases.Product &lt;&gt; 'N/A' AND Purchases.Product &lt;&gt; 'NONE' AND Purchases.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Purchases.ItemUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET ItemUID = _ETL_Items.ItemUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN _ETL_Items ON UPPER(Purchases.Product) = UPPER(_ETL_Items.Product)&#xA;&#x9;&#x9;WHERE Purchases.Product IS NOT NULL AND Purchases.Product &lt;&gt; ''&#xA;&#x9;&#x9;AND Purchases.Product &lt;&gt; 'N/A' AND Purchases.Product &lt;&gt; 'NONE' AND Purchases.Product &lt;&gt; 'UNKNOWN'&#xA;&#x9;&#x9;AND (Purchases.ItemUID IS NULL&#xA;&#x9;&#x9;OR Purchases.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET ItemUID = 0&#xA;WHERE ItemUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\18 - INSERT Purchase Item Details"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{311BA4FD-3BA3-43F7-91CA-7A4AEA9ABCBA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="18 - INSERT Purchase Item Details"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Purchases&#xA;SET AccountCode = ''&#xA;WHERE AccountCode IS NULL&#xA;OR AccountCode = 'N/A'&#xA;OR AccountCode = 'NONE'&#xA;OR AccountCode = 'UNKNOWN'&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TechDepartmentUID = tblTechDepartments.TechDepartmentUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechDepartments ON UPPER(Purchases.Department) = UPPER(tblTechDepartments.DepartmentName)&#xA;WHERE Purchases.Department IS NOT NULL AND Purchases.Department &lt;&gt; ''&#xA;AND Purchases.Department &lt;&gt; 'N/A' AND Purchases.Department &lt;&gt; 'NONE' AND Purchases.Department &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.TechDepartmentUID IS NULL&#xA;OR Purchases.TechDepartmentUID &lt;&gt; tblTechDepartments.TechDepartmentUID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TechDepartmentUID = 0&#xA;WHERE TechDepartmentUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;&#x9;&#x9;SET ItemUID = Purchases.ItemUID, FundingSourceUID = Purchases.FundingSourceUID,&#xA;&#x9;&#x9;SiteAddedSiteUID = Purchases.SiteAddedSiteUID, QuantityOrdered = ISNULL(Purchases.QuantityOrdered, 0),&#xA;&#x9;&#x9;QuantityReceived = ISNULL(Purchases.QuantityReceived, 0), PurchasePrice = ISNULL(Purchases.PurchasePrice, 0),&#xA;&#x9;&#x9;AccountCode = Purchases.AccountCode, LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;&#x9;&#x9;JOIN _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;WHERE TPID.ItemUID &lt;&gt; Purchases.ItemUID&#xA;&#x9;&#x9;OR TPID.FundingSourceUID &lt;&gt; Purchases.FundingSourceUID&#xA;&#x9;&#x9;OR TPID.SiteAddedSiteUID &lt;&gt; Purchases.SiteAddedSiteUID&#xA;&#x9;&#x9;OR TPID.QuantityOrdered &lt;&gt; ISNULL(Purchases.QuantityOrdered, 0)&#xA;&#x9;&#x9;OR TPID.QuantityReceived &lt;&gt; ISNULL(Purchases.QuantityReceived, 0)&#xA;&#x9;&#x9;OR TPID.PurchasePrice &lt;&gt; ISNULL(Purchases.PurchasePrice, 0)&#xA;&#x9;&#x9;OR TPID.AccountCode &lt;&gt; Purchases.AccountCode&#xA;&#xA;&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID, StatusUID,&#xA;&#x9;&#x9;SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode, LineNumber,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT Purchases.PurchaseUID, MAX(Purchases.ItemUID), MAX(Purchases.FundingSourceUID), 32,&#xA;&#x9;&#x9;MAX(Purchases.SiteAddedSiteUID), MAX(ISNULL(Purchases.QuantityOrdered, 0)),&#xA;&#x9;&#x9;MAX(ISNULL(Purchases.QuantityReceived, 0)), MAX(Purchases.PurchasePrice), MAX(Purchases.AccountCode),&#xA;&#x9;&#x9;Purchases.LineNumber, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE Purchases.PurchaseUID &gt; 0&#xA;&#x9;&#x9;AND Purchases.ItemUID &gt; 0&#xA;&#x9;&#x9;AND tblTechPurchaseItemDetails.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;GROUP BY Purchases.PurchaseUID, Purchases.LineNumber&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = TPID.ItemUID&#xA;&#x9;&#x9;FROM tblTechInventory AS Inventory&#xA;&#x9;&#x9;JOIN tblTechPurchaseInventory AS TPI ON Inventory.InventoryUID = TPI.InventoryUID&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemShipments AS TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails AS TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;&#x9;&#x9;WHERE Inventory.ItemUID &lt;&gt; TPID.ItemUID&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#xA;&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;&#x9;&#x9;SET QuantityOrdered = ISNULL(Purchases.QuantityOrdered, 0),&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;&#x9;&#x9;JOIN _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;WHERE TPID.QuantityOrdered &lt;&gt; ISNULL(Purchases.QuantityOrdered, 0)&#xA;&#xA;&#x9;&#x9;UPDATE tblTechPurchaseItemDetails&#xA;&#x9;&#x9;SET QuantityReceived = ISNULL(Purchases.QuantityReceived, 0),&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails AS TPID&#xA;&#x9;&#x9;JOIN _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;ON TPID.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;&#x9;&#x9;WHERE TPID.QuantityReceived &lt;&gt; ISNULL(Purchases.QuantityReceived, 0)&#xA;&#xA;&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID, StatusUID,&#xA;&#x9;&#x9;SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode, LineNumber,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT Purchases.PurchaseUID, Purchases.ItemUID, Purchases.FundingSourceUID, 32,&#xA;&#x9;&#x9;Purchases.SiteAddedSiteUID, MAX(ISNULL(Purchases.QuantityOrdered, 0)),&#xA;&#x9;&#x9;MAX(ISNULL(Purchases.QuantityReceived, 0)), Purchases.PurchasePrice, Purchases.AccountCode,&#xA;&#x9;&#x9;Purchases.LineNumber, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE Purchases.PurchaseUID &gt; 0&#xA;&#x9;&#x9;AND Purchases.ItemUID &gt; 0&#xA;&#x9;&#x9;AND tblTechPurchaseItemDetails.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;GROUP BY Purchases.PurchaseUID, Purchases.ItemUID, Purchases.FundingSourceUID,&#xA;&#x9;&#x9;Purchases.SiteAddedSiteUID, Purchases.PurchasePrice, Purchases.AccountCode, Purchases.LineNumber&#xA;&#xA;&#x9;&#x9;UPDATE _ETL_Purchases&#xA;&#x9;&#x9;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM _ETL_Purchases AS Purchases&#xA;&#x9;&#x9;JOIN tblTechPurchaseItemDetails ON Purchases.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;&#x9;&#x9;AND Purchases.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;&#x9;&#x9;AND Purchases.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;&#x9;&#x9;AND Purchases.SiteAddedSiteUID = tblTechPurchaseItemDetails.SiteAddedSiteUID&#xA;&#x9;&#x9;AND Purchases.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;&#x9;&#x9;AND Purchases.AccountCode = tblTechPurchaseItemDetails.AccountCode&#xA;&#x9;&#x9;AND Purchases.LineNumber = tblTechPurchaseItemDetails.LineNumber&#xA;&#x9;&#x9;WHERE (Purchases.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Purchases.PurchaseItemDetailUID &lt;&gt; tblTechPurchaseItemDetails.PurchaseItemDetailUID)&#xA;&#x9;END&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemDetailUID = 0&#xA;WHERE PurchaseItemDetailUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\19 - UPDATE Purchase Item Details"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{C796696E-E2D8-4143-91E8-64FDD6C9F9CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="19 - UPDATE Purchase Item Details"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice,&#xA;MIN(PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;FROM _ETL_Purchases&#xA;GROUP BY PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice)  AS Purchases&#xA;ON Tags.PurchaseUID = Purchases.PurchaseUID&#xA;AND Tags.ItemUID = Purchases.ItemUID&#xA;AND Tags.FundingSourceUID = Purchases.FundingSourceUID&#xA;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;WHERE Purchases.ItemUID &gt; 0&#xA;AND (Tags.PurchaseItemDetailUID IS NULL&#xA;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice,&#xA;MIN(PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY PurchaseUID, ItemUID, FundingSourceUID, PurchasePrice)  AS Purchases&#xA;ON Tags.PurchaseUID = Purchases.PurchaseUID&#xA;AND Tags.ItemUID = Purchases.ItemUID&#xA;AND Tags.FundingSourceUID = Purchases.FundingSourceUID&#xA;AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = ISNULL(Tags.c, 0),&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchaseItemDetails AS TPID&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemDetailUID&#xA;FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemDetailUID) AS Tags&#xA;ON TPID.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;WHERE TPID.QuantityOrdered &lt; ISNULL(Tags.c, 0)&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityReceived = ISNULL(Tags.c, 0),&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchaseItemDetails AS TPID&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemDetailUID&#xA;FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemDetailUID) AS Tags&#xA;ON TPID.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;WHERE TPID.QuantityReceived &lt; ISNULL(Tags.c, 0)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\20 - INSERT Purchase Item Details"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{2F8706FD-8525-4A44-9B1F-C3AA7672B49E}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="20 - INSERT Purchase Item Details"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 17 AND ETLSettingValue = 'True') = 0&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;INSERT INTO tblTechPurchaseItemDetails (PurchaseUID, ItemUID, FundingSourceUID,&#xA;&#x9;&#x9;StatusUID, SiteAddedSiteUID, QuantityOrdered, QuantityReceived, PurchasePrice, AccountCode,&#xA;&#x9;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;&#x9;SELECT Tags.PurchaseUID, Tags.ItemUID, Tags.FundingSourceUID,&#xA;&#x9;&#x9;33, 1, COUNT(*), COUNT(*), Tags.PurchasePrice, NULL, 0, GETDATE(), 0, GETDATE()&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;WHERE Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND Tags.InventoryUID &gt; 0&#xA;&#x9;&#x9;AND Tags.SiteUID &gt; 0&#xA;&#x9;&#x9;AND Tags.PurchaseUID &gt; 0&#xA;&#x9;&#x9;AND (Tags.PurchaseItemDetailUID IS NULL&#xA;&#x9;&#x9;OR Tags.PurchaseItemDetailUID = 0)&#xA;&#x9;&#x9;GROUP BY Tags.PurchaseUID, Tags.ItemUID,&#xA;&#x9;&#x9;Tags.FundingSourceUID, Tags.PurchasePrice&#xA;&#x9;END&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = QuantityReceived&#xA;WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseItemDetails ON Tags.PurchaseUID = tblTechPurchaseItemDetails.PurchaseUID&#xA;AND Tags.ItemUID = tblTechPurchaseItemDetails.ItemUID&#xA;AND Tags.FundingSourceUID = tblTechPurchaseItemDetails.FundingSourceUID&#xA;AND Tags.PurchasePrice = tblTechPurchaseItemDetails.PurchasePrice&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemDetailUID = 0&#xA;WHERE PurchaseItemDetailUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\21 - INSERT Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{D6148797-AC31-4F65-8464-39192D263DE6}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="21 - INSERT Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE tblTechPurchaseItemShipments&#xA;SET TicketNumber = ''&#xA;WHERE TicketNumber IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketNumber = ''&#xA;WHERE TicketNumber IS NULL&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketedByUserID = tblUser.UserID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblUser ON UPPER(Purchases.TicketedBy) = UPPER(tblUser.RealName)&#xA;AND tblUser.ApplicationUID = 2&#xA;WHERE Purchases.TicketedBy IS NOT NULL AND Purchases.TicketedBy &lt;&gt; ''&#xA;AND Purchases.TicketedBy &lt;&gt; 'N/A' AND Purchases.TicketedBy &lt;&gt; 'NONE' AND Purchases.TicketedBy &lt;&gt; 'UNKNOWN'&#xA;AND (Purchases.TicketedByUserID IS NULL&#xA;OR Purchases.TicketedByUserID &lt;&gt; tblUser.UserID)&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET TicketedByUserID = 0&#xA;WHERE TicketedByUserID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = ISNULL(Tags.c, 0), LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchaseItemShipments AS TPIS&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON TPIS.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails ON TPIS.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;WHERE TPIS.QuantityShipped &lt; ISNULL(Tags.c, 0)&#xA;&#xA;INSERT INTO tblTechPurchaseItemShipments (PurchaseItemDetailUID, ShippedToSiteUID, TicketNumber, QuantityShipped,&#xA;TicketedByUserID, TicketedDate, StatusUID, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Purchases.PurchaseItemDetailUID, Purchases.ShippedToSiteUID, Purchases.TicketNumber, MAX(ISNULL(Purchases.QuantityShipped, 0)),&#xA;MAX(Purchases.TicketedByUserID), MIN(ISNULL(Purchases.TicketedDate, GETDATE())), 58, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Purchases AS Purchases&#xA;LEFT JOIN tblTechPurchaseItemShipments ON Purchases.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND Purchases.ShippedToSiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;AND Purchases.TicketNumber = tblTechPurchaseItemShipments.TicketNumber&#xA;WHERE Purchases.PurchaseItemDetailUID &gt; 0&#xA;AND Purchases.ShippedToSiteUID &gt; 0&#xA;AND purchases.PurchaseItemShipmentUID IS NULL&#xA;AND tblTechPurchaseItemShipments.PurchaseItemShipmentUID IS NULL&#xA;GROUP BY Purchases.PurchaseItemDetailUID, Purchases.ShippedToSiteUID, Purchases.TicketNumber&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;FROM _ETL_Purchases AS Purchases&#xA;JOIN tblTechPurchaseItemShipments ON Purchases.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND Purchases.ShippedToSiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;AND Purchases.TicketNumber = tblTechPurchaseItemShipments.TicketNumber&#xA;WHERE Purchases.PurchaseItemShipmentUID IS NULL&#xA;OR Purchases.PurchaseItemShipmentUID &lt;&gt; tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;&#xA;UPDATE _ETL_Purchases&#xA;SET PurchaseItemShipmentUID = 0&#xA;WHERE PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityReceived = TPIS.Quantity&#xA;FROM tblTechPurchaseItemDetails AS TPID&#xA;JOIN (SELECT PurchaseItemDetailUID, SUM(QuantityShipped) AS Quantity&#xA;FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS TPIS&#xA;ON TPID.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;WHERE TPIS.Quantity &gt; TPID.QuantityReceived&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = QuantityReceived&#xA;WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET StatusUID = 32&#xA;WHERE QuantityOrdered &gt; QuantityReceived&#xA;AND StatusUID = 33&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\22 - UPDATE Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{8A2C4C20-8F81-4787-AE12-E91F5F0F8DDD}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="22 - UPDATE Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = Purchases.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;FROM tblTechInventoryHistory GROUP BY InventoryUID) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;JOIN _ETL_Purchases AS Purchases ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;AND tblTechInventoryHistory.SiteUID = Purchases.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;FROM tblTechInventoryHistory GROUP BY InventoryUID) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;JOIN tblTechPurchaseItemShipments ON Tags.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND tblTechInventoryHistory.SiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = Purchases.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN _ETL_Purchases AS Purchases ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;AND Tags.SiteUID = Purchases.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseItemShipments ON Tags.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND Tags.SiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;WHERE Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = ISNULL(Tags.c, 0), LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchaseItemShipments AS TPIS&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON TPIS.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails ON TPIS.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;WHERE TPIS.QuantityShipped &lt; ISNULL(Tags.c, 0)&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\23 - INSERT Purchase Item Shipments"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{43E5C206-9EC3-4887-BD9B-E94E6931AB26}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="23 - INSERT Purchase Item Shipments"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="INSERT INTO tblTechPurchaseItemShipments (PurchaseItemDetailUID, ShippedToSiteUID, TicketNumber, QuantityShipped,&#xA;TicketedByUserID, TicketedDate, StatusUID, CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Tags.PurchaseItemDetailUID, Tags.SiteUID, NULL, COUNT(*),&#xA;NULL, NULL, 33, 0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID &gt; 0&#xA;AND (Tags.PurchaseItemShipmentUID IS NULL&#xA;OR Tags.PurchaseItemShipmentUID = 0)&#xA;GROUP BY Tags.PurchaseItemDetailUID, Tags.SiteUID&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN (SELECT MIN(InventoryHistoryUID) AS InventoryHistoryUID, InventoryUID&#xA;FROM tblTechInventoryHistory GROUP BY InventoryUID) AS HistoryJoin ON Tags.InventoryUID = HistoryJoin.InventoryUID&#xA;JOIN tblTechInventoryHistory ON HistoryJoin.InventoryHistoryUID = tblTechInventoryHistory.InventoryHistoryUID&#xA;JOIN tblTechPurchaseItemShipments ON Tags.PurchaseItemDetailUID = tblTechPurchaseItemShipments.PurchaseItemDetailUID&#xA;AND tblTechInventoryHistory.SiteUID = tblTechPurchaseItemShipments.ShippedToSiteUID&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseItemShipmentUID = 0&#xA;WHERE PurchaseItemShipmentUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\24 - UPDATE Purchase Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{AD46B0D2-5CCF-4DE2-A788-00389EF867D3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="24 - UPDATE Purchase Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = tblTechPurchaseInventory.PurchaseInventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseInventory ON Tags.InventoryUID = tblTechPurchaseInventory.InventoryUID&#xA;WHERE Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseInventoryUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseInventory&#xA;SET PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory AS TPI&#xA;JOIN _ETL_Inventory AS Tags ON TPI.PurchaseInventoryUID = Tags.PurchaseInventoryUID&#xA;AND Tags.PurchaseItemShipmentUID &gt; 0&#xA;AND TPI.PurchaseItemShipmentUID &lt;&gt; Tags.PurchaseItemShipmentUID&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseInventory AS old&#xA;JOIN tblTechPurchaseItemShipments ON old.PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails ON tblTechPurchaseItemShipments.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases ON tblTechPurchaseItemDetails.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN _ETL_Inventory AS Tags ON old.PurchaseInventoryUID = Tags.PurchaseInventoryUID&#xA;LEFT JOIN tblTechInventory ON old.InventoryUID = tblTechInventory.InventoryUID&#xA;AND old.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;WHERE tblTechPurchases.Notes LIKE '%ASSET IMPORT%'&#xA;AND Tags.PurchaseInventoryUID IS NULL&#xA;AND tblTechInventory.InventoryUID IS NULL&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\25 - INSERT Purchase Inventory"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:Disabled="True"
      DTS:DTSID="{39E5758B-4055-4844-9B28-556EB2AEF880}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="25 - INSERT Purchase Inventory"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="INSERT INTO tblTechPurchaseInventory (InventoryUID, PurchaseItemShipmentUID,&#xA;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;SELECT Tags.InventoryUID, Tags.PurchaseItemShipmentUID,&#xA;0, GETDATE(), 0, GETDATE()&#xA;FROM _ETL_Inventory AS Tags&#xA;WHERE Tags.InventoryUID &gt; 0&#xA;AND Tags.SiteUID &gt; 0&#xA;AND Tags.PurchaseUID &gt; 0&#xA;AND Tags.PurchaseItemDetailUID &gt; 0&#xA;AND Tags.PurchaseItemShipmentUID &gt; 0&#xA;AND (Tags.PurchaseInventoryUID IS NULL&#xA;OR Tags.PurchaseInventoryUID = 0)&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = tblTechPurchaseInventory.PurchaseInventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseInventory ON Tags.InventoryUID = tblTechPurchaseInventory.InventoryUID&#xA;WHERE Tags.PurchaseInventoryUID IS NULL&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET PurchaseInventoryUID = 0&#xA;WHERE PurchaseInventoryUID IS NULL&#xA;&#xA;UPDATE tblTechInventory&#xA;SET ItemUID = TPID.ItemUID&#xA;FROM tblTechInventory AS Inventory&#xA;JOIN tblTechPurchaseInventory AS TPI ON Inventory.InventoryUID = TPI.InventoryUID&#xA;JOIN tblTechPurchaseItemShipments AS TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails AS TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;WHERE TPID.ItemUID &gt; 0&#xA;AND Inventory.ItemUID &lt;&gt; TPID.ItemUID&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseItemShipments AS old&#xA;JOIN tblTechPurchaseItemDetails ON old.PurchaseItemDetailUID = tblTechPurchaseItemDetails.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases ON tblTechPurchaseItemDetails.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Inv ON old.PurchaseItemShipmentUID = Inv.PurchaseItemShipmentUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM _ETL_Purchases&#xA;GROUP BY PurchaseItemShipmentUID) AS Purch ON old.PurchaseItemShipmentUID = Purch.PurchaseItemShipmentUID&#xA;LEFT JOIN (SELECT PurchaseItemShipmentUID FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags ON old.PurchaseItemShipmentUID = Tags.PurchaseItemShipmentUID&#xA;WHERE tblTechPurchases.Notes LIKE '%ASSET DATA IMPORT%'&#xA;AND Inv.PurchaseItemShipmentUID IS NULL&#xA;AND Purch.PurchaseItemShipmentUID IS NULL&#xA;AND Tags.PurchaseItemShipmentUID IS NULL&#xA;&#xA;DELETE old&#xA;FROM tblTechPurchaseItemDetails AS old&#xA;JOIN tblTechPurchases ON old.PurchaseUID = tblTechPurchases.PurchaseUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM _ETL_Inventory&#xA;GROUP BY PurchaseItemDetailUID) AS Inv ON old.PurchaseItemDetailUID = Inv.PurchaseItemDetailUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM _ETL_Purchases&#xA;GROUP BY PurchaseItemDetailUID) AS Purch ON old.PurchaseItemDetailUID = Purch.PurchaseItemDetailUID&#xA;LEFT JOIN (SELECT PurchaseItemDetailUID FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS Tags ON old.PurchaseItemDetailUID = Tags.PurchaseItemDetailUID&#xA;WHERE tblTechPurchases.Notes LIKE '%ASSET DATA IMPORT%'&#xA;AND Inv.PurchaseItemDetailUID IS NULL&#xA;AND Purch.PurchaseItemDetailUID IS NULL&#xA;AND Tags.PurchaseItemDetailUID IS NULL&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET QuantityShipped = Tags.c&#xA;FROM tblTechPurchaseItemShipments&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON Tags.PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;WHERE Tags.c &gt; QuantityShipped&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET StatusUID = 33&#xA;FROM tblTechPurchaseItemShipments&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON Tags.PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;WHERE Tags.c = QuantityShipped&#xA;AND (StatusUID = 32&#xA;OR StatusUID = 58)&#xA;&#xA;UPDATE tblTechPurchaseItemShipments&#xA;SET StatusUID = 58&#xA;FROM tblTechPurchaseItemShipments&#xA;JOIN (SELECT COUNT(*) AS c, PurchaseItemShipmentUID&#xA;FROM tblTechPurchaseInventory&#xA;GROUP BY PurchaseItemShipmentUID) AS Tags&#xA;ON Tags.PurchaseItemShipmentUID = tblTechPurchaseItemShipments.PurchaseItemShipmentUID&#xA;WHERE Tags.c &lt; QuantityShipped&#xA;AND StatusUID = 33&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityReceived = TPIS.Quantity&#xA;FROM tblTechPurchaseItemDetails AS TPID&#xA;JOIN (SELECT PurchaseItemDetailUID, SUM(QuantityShipped) AS Quantity&#xA;FROM tblTechPurchaseItemShipments&#xA;GROUP BY PurchaseItemDetailUID) AS TPIS&#xA;ON TPID.PurchaseItemDetailUID = TPIS.PurchaseItemDetailUID&#xA;WHERE TPIS.Quantity &gt; TPID.QuantityReceived&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET QuantityOrdered = QuantityReceived&#xA;WHERE QuantityReceived &gt; QuantityOrdered&#xA;&#xA;UPDATE tblTechPurchaseItemDetails&#xA;SET StatusUID = 32&#xA;WHERE QuantityOrdered &gt; QuantityReceived&#xA;AND StatusUID = 33&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Run Custom Scripts"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{792ABEAB-D98E-4724-B8B0-71682AADD9D1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Run Custom Scripts"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{0F3AE158-BCC2-4D38-87F8-A205FEA89288}"
          SQLTask:SqlStatementSource="UPDATE tblTechPurchases&#xA;SET FRN = Purchases.Other1,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechPurchases AS TP&#xA;JOIN (SELECT PurchaseOrder, MAX(Other1) AS Other1&#xA;FROM _ETL_Purchases&#xA;GROUP BY PurchaseOrder) AS Purchases&#xA;ON UPPER(TP.OrderNumber) = UPPER(Purchases.PurchaseOrder)&#xA;WHERE Purchases.Other1 IS NOT NULL&#xA;AND (TP.FRN IS NULL&#xA;OR TP.FRN &lt;&gt; Purchases.Other1)&#xA;&#xA;GO&#xA;&#xA;/*&#xA;UPDATE tblTechInventoryExt SET InventoryExtValue = TP.Other1&#xA;FROM tblTechInventoryExt TIE&#xA;JOIN tblTechInventory TI ON TIE.InventoryUID = TI.InventoryUID&#xA;JOIN tblTechItems TTI ON TI.ItemUID = TTI.ItemUID&#xA;JOIN tblTechInventoryMeta TIM ON TIE.InventoryMetaUID = TIM.InventoryMetaUID&#xA;AND TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;JOIN tblTechPurchaseInventory TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;JOIN tblTechPurchaseItemShipments TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TIE.InventoryExtValue &lt;&gt; TP.Other1&#xA;&#xA;GO&#xA;&#xA;&#xA;INSERT INTO tblTechInventoryMeta (InventoryMetaLabel, InventoryMetaOrder,&#xA;InventoryMetaRequired, InventoryMetaType, ItemTypeUID)&#xA;SELECT 'FRN#', 1, 1, 'Integer', TTI.ItemTypeUID&#xA;FROM (SELECT MAX(ItemUID) AS ItemUID, ItemTypeUID&#xA;FROM tblTechItems&#xA;GROUP BY ItemTypeUID) AS TTI&#xA;JOIN tblTechItemTypes AS TTIT ON TTI.ItemTypeUID = TTIT.ItemTypeUID&#xA;JOIN (SELECT MAX(PurchaseUID) AS PurchaseUID, ItemUID&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY ItemUID) AS TPID ON TTI.ItemUID = TPID.ItemUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;LEFT JOIN tblTechInventoryMeta TIM ON TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;LEFT JOIN tblTechInventoryMeta TIM2 ON TTI.ItemTypeUID = TIM2.ItemTypeUID&#xA;AND TIM2.InventoryMetaOrder = 1&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TIM.InventoryMetaUID IS NULL&#xA;AND TIM2.InventoryMetaUID IS NULL&#xA;AND TTIT.ItemTypeName LIKE 'NETWORK%'&#xA;&#xA;GO&#xA;&#xA;&#xA;INSERT INTO tblTechInventoryMeta (InventoryMetaLabel, InventoryMetaOrder,&#xA;InventoryMetaRequired, InventoryMetaType, ItemTypeUID)&#xA;SELECT 'FRN#', 2, 1, 'Integer', TTI.ItemTypeUID&#xA;FROM (SELECT MAX(ItemUID) AS ItemUID, ItemTypeUID&#xA;FROM tblTechItems&#xA;GROUP BY ItemTypeUID) AS TTI&#xA;JOIN tblTechItemTypes AS TTIT ON TTI.ItemTypeUID = TTIT.ItemTypeUID&#xA;JOIN (SELECT MAX(PurchaseUID) AS PurchaseUID, ItemUID&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY ItemUID) AS TPID ON TTI.ItemUID = TPID.ItemUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;LEFT JOIN tblTechInventoryMeta TIM ON TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;LEFT JOIN tblTechInventoryMeta TIM2 ON TTI.ItemTypeUID = TIM2.ItemTypeUID&#xA;AND TIM2.InventoryMetaOrder = 2&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TIM.InventoryMetaUID IS NULL&#xA;AND TIM2.InventoryMetaUID IS NULL&#xA;AND TTIT.ItemTypeName LIKE 'NETWORK%'&#xA;&#xA;GO&#xA;&#xA;&#xA;INSERT INTO tblTechInventoryMeta (InventoryMetaLabel, InventoryMetaOrder,&#xA;InventoryMetaRequired, InventoryMetaType, ItemTypeUID)&#xA;SELECT 'FRN#', 3, 1, 'Integer', TTI.ItemTypeUID&#xA;FROM (SELECT MAX(ItemUID) AS ItemUID, ItemTypeUID&#xA;FROM tblTechItems&#xA;GROUP BY ItemTypeUID) AS TTI&#xA;JOIN tblTechItemTypes AS TTIT ON TTI.ItemTypeUID = TTIT.ItemTypeUID&#xA;JOIN (SELECT MAX(PurchaseUID) AS PurchaseUID, ItemUID&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY ItemUID) AS TPID ON TTI.ItemUID = TPID.ItemUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;LEFT JOIN tblTechInventoryMeta TIM ON TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;LEFT JOIN tblTechInventoryMeta TIM2 ON TTI.ItemTypeUID = TIM2.ItemTypeUID&#xA;AND TIM2.InventoryMetaOrder = 3&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TIM.InventoryMetaUID IS NULL&#xA;AND TIM2.InventoryMetaUID IS NULL&#xA;AND TTIT.ItemTypeName LIKE 'NETWORK%'&#xA;&#xA;GO&#xA;&#xA;&#xA;INSERT INTO tblTechInventoryMeta (InventoryMetaLabel, InventoryMetaOrder,&#xA;InventoryMetaRequired, InventoryMetaType, ItemTypeUID)&#xA;SELECT 'FRN#', 4, 1, 'Integer', TTI.ItemTypeUID&#xA;FROM (SELECT MAX(ItemUID) AS ItemUID, ItemTypeUID&#xA;FROM tblTechItems&#xA;GROUP BY ItemTypeUID) AS TTI&#xA;JOIN tblTechItemTypes AS TTIT ON TTI.ItemTypeUID = TTIT.ItemTypeUID&#xA;JOIN (SELECT MAX(PurchaseUID) AS PurchaseUID, ItemUID&#xA;FROM tblTechPurchaseItemDetails&#xA;GROUP BY ItemUID) AS TPID ON TTI.ItemUID = TPID.ItemUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;LEFT JOIN tblTechInventoryMeta TIM ON TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;LEFT JOIN tblTechInventoryMeta TIM2 ON TTI.ItemTypeUID = TIM2.ItemTypeUID&#xA;AND TIM2.InventoryMetaOrder = 4&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TIM.InventoryMetaUID IS NULL&#xA;AND TIM2.InventoryMetaUID IS NULL&#xA;AND TTIT.ItemTypeName LIKE 'NETWORK%'&#xA;&#xA;GO&#xA;&#xA;&#xA;INSERT INTO tblTechInventoryExt (InventoryUID, InventoryMetaUID, InventoryExtValue)&#xA;SELECT TI.InventoryUID, TIM.InventoryMetaUID, TP.Other1&#xA;FROM tblTechInventory TI&#xA;JOIN tblTechItems TTI ON TI.ItemUID = TTI.ItemUID&#xA;JOIN tblTechInventoryMeta TIM ON TTI.ItemTypeUID = TIM.ItemTypeUID&#xA;AND TIM.InventoryMetaLabel = 'FRN#'&#xA;JOIN tblTechPurchaseInventory TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;JOIN tblTechPurchaseItemShipments TPIS ON TPI.PurchaseItemShipmentUID = TPIS.PurchaseItemShipmentUID&#xA;JOIN tblTechPurchaseItemDetails TPID ON TPIS.PurchaseItemDetailUID = TPID.PurchaseItemDetailUID&#xA;JOIN tblTechPurchases TP ON TPID.PurchaseUID = TP.PurchaseUID&#xA;LEFT JOIN tblTechInventoryExt TIE ON TI.InventoryUID = TIE.InventoryUID&#xA;AND TIE.InventoryMetaUID = TIM.InventoryMetaUID&#xA;WHERE TP.Other1 IS NOT NULL&#xA;AND TP.Other1 &lt;&gt; ''&#xA;AND TIE.InventoryExtUID IS NULL&#xA;&#xA;GO&#xA;&#xA;UPDATE tblUnvDistrictPreferences&#xA;SET DistrictPreferenceValue = '1',&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;WHERE ApplicationUID = 2&#xA;AND DistrictPreferenceName = 'LockCustomFieldFRN#'&#xA;AND DistrictPreferenceValue &lt;&gt; '1'&#xA;&#xA;GO&#xA;&#xA;&#xA;IF (SELECT COUNT(*) FROM tblUnvDistrictPreferences WHERE DistrictPreferenceName = 'LockCustomFieldFRN#') = 0&#xA;&#x9;INSERT INTO tblUnvDistrictPreferences (ApplicationUID, DistrictPreferenceName,&#xA;&#x9;DistrictPreferenceDescription, DistrictPreferenceValue,&#xA;&#x9;CreatedByUserID, CreatedDate, LastModifiedByUserID, LastModifiedDate)&#xA;&#x9;SELECT 2, 'LockCustomFieldFRN#', 'Lock the FRN Number Custom Field', '1',&#xA;&#x9;0, GETDATE(), 0, GETDATE()&#xA;&#xA;GO&#xA;*/" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{58DE664B-836D-4D8D-B9FA-84076CCA4521}"
      DTS:From="Package\01 - INSERT Manufacturers"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\02 - INSERT Areas" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{CDB7A048-8987-4325-AD54-8D1BE693FCD7}"
      DTS:From="Package\02 - INSERT Areas"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\03 - INSERT Item Types" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 10]"
      DTS:CreationName=""
      DTS:DTSID="{25333DB6-E4F5-41EC-9D3E-190E2CC07C5E}"
      DTS:From="Package\11 - INSERT Purchase Orders"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 10"
      DTS:To="Package\12 - INSERT Items" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 11]"
      DTS:CreationName=""
      DTS:DTSID="{90ACDF6C-C27C-468C-A699-25B907C5194C}"
      DTS:From="Package\12 - INSERT Items"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 11"
      DTS:To="Package\13 - UPDATE Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 12]"
      DTS:CreationName=""
      DTS:DTSID="{776893F0-4B62-43D4-A406-4DACA22388F0}"
      DTS:From="Package\13 - UPDATE Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 12"
      DTS:To="Package\14 - UPDATE Inventory Custom" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 13]"
      DTS:CreationName=""
      DTS:DTSID="{AE3AE31A-A640-4483-81CA-984B2FF3A1B6}"
      DTS:From="Package\14 - UPDATE Inventory Custom"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 13"
      DTS:To="Package\15 - INSERT Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 14]"
      DTS:CreationName=""
      DTS:DTSID="{B7350116-962E-49E4-8E5A-ADB125FB560C}"
      DTS:From="Package\15 - INSERT Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 14"
      DTS:To="Package\16 - INSERT Inventory Custom" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 15]"
      DTS:CreationName=""
      DTS:DTSID="{61A0FE49-165F-457C-85D8-3EE23C5C10E2}"
      DTS:From="Package\16 - INSERT Inventory Custom"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 15"
      DTS:To="Package\17 - INSERT Items" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 16]"
      DTS:CreationName=""
      DTS:DTSID="{96BCDB2F-31EC-461D-BD0E-090CABAB3EBB}"
      DTS:From="Package\17 - INSERT Items"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 16"
      DTS:To="Package\18 - INSERT Purchase Item Details" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 17]"
      DTS:CreationName=""
      DTS:DTSID="{D3A86A6E-7655-4DC4-97C9-1E9F916FF93E}"
      DTS:From="Package\18 - INSERT Purchase Item Details"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 17"
      DTS:To="Package\19 - UPDATE Purchase Item Details" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 18]"
      DTS:CreationName=""
      DTS:DTSID="{7FBF5953-2E3F-461F-A970-5C6FFE6A83BA}"
      DTS:From="Package\19 - UPDATE Purchase Item Details"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 18"
      DTS:To="Package\20 - INSERT Purchase Item Details" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 19]"
      DTS:CreationName=""
      DTS:DTSID="{99EC6424-D82B-472A-AF1D-2B6CEA4EB068}"
      DTS:From="Package\20 - INSERT Purchase Item Details"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 19"
      DTS:To="Package\21 - INSERT Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{4B217D09-61B3-48A9-9A96-D95D3F6DDAC1}"
      DTS:From="Package\03 - INSERT Item Types"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\04 - INSERT Items" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 20]"
      DTS:CreationName=""
      DTS:DTSID="{85D37BA1-CE78-4B9C-99DC-C91819AC0568}"
      DTS:From="Package\21 - INSERT Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 20"
      DTS:To="Package\22 - UPDATE Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 21]"
      DTS:CreationName=""
      DTS:DTSID="{4174A57F-1C65-4E40-BFFA-15B6C10B1014}"
      DTS:From="Package\22 - UPDATE Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 21"
      DTS:To="Package\23 - INSERT Purchase Item Shipments" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 22]"
      DTS:CreationName=""
      DTS:DTSID="{6454D22A-C600-4F31-B017-377818FF2534}"
      DTS:From="Package\23 - INSERT Purchase Item Shipments"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 22"
      DTS:To="Package\24 - UPDATE Purchase Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 23]"
      DTS:CreationName=""
      DTS:DTSID="{663FE7D5-9D41-4886-A53D-BFF528836EC4}"
      DTS:From="Package\24 - UPDATE Purchase Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 23"
      DTS:To="Package\25 - INSERT Purchase Inventory" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 24]"
      DTS:CreationName=""
      DTS:DTSID="{FBC806AA-B13A-4741-BC04-6811321D5E93}"
      DTS:From="Package\00 - Initial"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 24"
      DTS:To="Package\01 - INSERT Manufacturers" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 25]"
      DTS:CreationName=""
      DTS:DTSID="{EA066EB2-AE11-4716-9FF8-605B927546A8}"
      DTS:From="Package\25 - INSERT Purchase Inventory"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 25"
      DTS:To="Package\Run Custom Scripts" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{086ED23F-E074-44DB-B986-6A52CD12FD19}"
      DTS:From="Package\04 - INSERT Items"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\05 - INSERT Vendors" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 4]"
      DTS:CreationName=""
      DTS:DTSID="{FFC40C9D-4C32-4EF2-B1FD-8EB3A8AF15EE}"
      DTS:From="Package\05 - INSERT Vendors"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 4"
      DTS:To="Package\06 - INSERT Purchase Orders" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 5]"
      DTS:CreationName=""
      DTS:DTSID="{64F33529-36B1-4246-AE75-0C80B7FD7DFF}"
      DTS:From="Package\06 - INSERT Purchase Orders"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 5"
      DTS:To="Package\07 - INSERT Funding Sources" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 6]"
      DTS:CreationName=""
      DTS:DTSID="{D2AB4AD6-1BB4-4436-B71D-55AE8FB4C8B2}"
      DTS:From="Package\07 - INSERT Funding Sources"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 6"
      DTS:To="Package\08 - INSERT Locations" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 7]"
      DTS:CreationName=""
      DTS:DTSID="{FF687452-5C36-46D3-A923-3630874FBAB3}"
      DTS:From="Package\08 - INSERT Locations"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 7"
      DTS:To="Package\09 - INSERT Status" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 8]"
      DTS:CreationName=""
      DTS:DTSID="{79A678F3-5580-4DD9-B553-75999417F655}"
      DTS:From="Package\09 - INSERT Status"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 8"
      DTS:To="Package\10 - INSERT Funding Sources" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 9]"
      DTS:CreationName=""
      DTS:DTSID="{3E4BF43C-2689-4D41-8B8E-8543DA71EED5}"
      DTS:From="Package\10 - INSERT Funding Sources"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 9"
      DTS:To="Package\11 - INSERT Purchase Orders" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation">
        <NodeLayout
          Size="161,44"
          Id="Package\00 - Initial"
          TopLeft="6.82075471698113,23.9528301886793" />
        <NodeLayout
          Size="164,44"
          Id="Package\01 - INSERT Manufacturers"
          TopLeft="5.5,105.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\02 - INSERT Areas"
          TopLeft="195.952830188679,105.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\03 - INSERT Item Types"
          TopLeft="386.405660377359,105.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\04 - INSERT Items"
          TopLeft="576.858490566038,105.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\05 - INSERT Vendors"
          TopLeft="767.311320754717,105.877358490566" />
        <NodeLayout
          Size="164,44"
          Id="Package\06 - INSERT Purchase Orders"
          TopLeft="767.311320754717,180.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\07 - INSERT Funding Sources"
          TopLeft="576.858490566038,180.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\08 - INSERT Locations"
          TopLeft="386.405660377359,180.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\09 - INSERT Status"
          TopLeft="195.952830188679,180.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\10 - INSERT Funding Sources"
          TopLeft="5.5,180.141509433962" />
        <NodeLayout
          Size="164,44"
          Id="Package\11 - INSERT Purchase Orders"
          TopLeft="5.5,254.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\12 - INSERT Items"
          TopLeft="195.952830188679,254.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\13 - UPDATE Inventory"
          TopLeft="386.405660377359,254.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\14 - UPDATE Inventory Custom"
          TopLeft="576.858490566038,254.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\15 - INSERT Inventory"
          TopLeft="767.311320754717,254.330188679245" />
        <NodeLayout
          Size="164,44"
          Id="Package\16 - INSERT Inventory Custom"
          TopLeft="767.311320754717,330.745283018868" />
        <NodeLayout
          Size="164,44"
          Id="Package\17 - INSERT Items"
          TopLeft="576.858490566038,330.745283018868" />
        <NodeLayout
          Size="164,44"
          Id="Package\18 - INSERT Purchase Item Details"
          TopLeft="386.405660377359,330.745283018868" />
        <NodeLayout
          Size="164,44"
          Id="Package\19 - UPDATE Purchase Item Details"
          TopLeft="195.952830188679,330.745283018868" />
        <NodeLayout
          Size="164,44"
          Id="Package\20 - INSERT Purchase Item Details"
          TopLeft="5.5,330.745283018868" />
        <NodeLayout
          Size="164,44"
          Id="Package\21 - INSERT Purchase Item Shipments"
          TopLeft="5.5,404.858490566038" />
        <NodeLayout
          Size="164,44"
          Id="Package\22 - UPDATE Purchase Item Shipments"
          TopLeft="195.952830188679,404.858490566038" />
        <NodeLayout
          Size="164,44"
          Id="Package\23 - INSERT Purchase Item Shipments"
          TopLeft="386.405660377359,404.858490566038" />
        <NodeLayout
          Size="164,44"
          Id="Package\24 - UPDATE Purchase Inventory"
          TopLeft="576.858490566038,404.858490566038" />
        <NodeLayout
          Size="164,44"
          Id="Package\25 - INSERT Purchase Inventory"
          TopLeft="767.311320754717,404.858490566038" />
        <NodeLayout
          Size="161,44"
          Id="Package\Run Custom Scripts"
          TopLeft="768.518867924528,483.952830188679" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="169.235849056604,127.839622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="359.688679245283,127.839622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 10]"
          TopLeft="169.235849056604,276.292452830189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 11]"
          TopLeft="359.688679245283,276.292452830189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 12]"
          TopLeft="550.141509433962,276.292452830189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 13]"
          TopLeft="740.594339622642,276.292452830189">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 14]"
          TopLeft="849.160377358491,298.254716981132">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,32.4905660377358"
              Start="0,0"
              End="0,24.9905660377358">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.9905660377358" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 15]"
          TopLeft="767.311320754717,352.707547169811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 16]"
          TopLeft="576.858490566038,352.707547169811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 17]"
          TopLeft="386.405660377359,352.707547169811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 18]"
          TopLeft="195.952830188679,352.707547169811">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 19]"
          TopLeft="87.3490566037736,374.669811320755">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,30.188679245283"
              Start="0,0"
              End="0,22.688679245283">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.688679245283" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="550.141509433962,127.839622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 20]"
          TopLeft="169.235849056604,426.820754716981">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 21]"
          TopLeft="359.688679245283,426.820754716981">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 22]"
          TopLeft="550.141509433962,426.820754716981">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 23]"
          TopLeft="740.594339622642,426.820754716981">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 24]"
          TopLeft="87.1603773584906,67.877358490566">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0.188679245283012,38"
              Start="0,0"
              End="0.188679245283012,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,19.0188679245283" />
                  <mssgle:LineSegment
                    End="0.188679245283012,19.0188679245283" />
                  <mssgle:LineSegment
                    End="0.188679245283012,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 25]"
          TopLeft="849.160377358491,448.783018867925">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-0.301886792452819,35.1698113207547"
              Start="0,0"
              End="-0.301886792452819,27.6698113207547">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5849056603773" />
                  <mssgle:LineSegment
                    End="-0.301886792452819,17.5849056603773" />
                  <mssgle:LineSegment
                    End="-0.301886792452819,27.6698113207547" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="740.594339622642,127.839622641509">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="26.7169811320755,0"
              Start="0,0"
              End="19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="849.160377358491,149.801886792453">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,30.3396226415094"
              Start="0,0"
              End="0,22.8396226415094">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.8396226415094" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="767.311320754717,202.103773584906">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="576.858490566038,202.103773584906">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="386.405660377359,202.103773584906">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 8]"
          TopLeft="195.952830188679,202.103773584906">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="-26.7169811320755,0"
              Start="0,0"
              End="-19.2169811320755,0">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-19.2169811320755,0" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 9]"
          TopLeft="87.3490566037736,224.066037735849">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{x:Null}"
              EndConnector="0,30.2641509433962"
              Start="0,0"
              End="0,22.7641509433962">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.7641509433962" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <AnnotationLayout
          Text="PO = 00, 01, 02, 03, 04, 05, 06, 07, 17, 18, 21"
          ParentId="Package"
          Size="502,40"
          Id="f9a82987-d95a-4bfa-8f81-941cdfaae20f"
          TopLeft="272.292452830189,5.5">
          <AnnotationLayout.FontInfo>
            <mssge:FontInfo
              Family="Tahoma"
              Size="11.25"
              Color="#FF080000">
              <mssge:FontInfo.TextDecorations>
                <av:TextDecorationCollection />
              </mssge:FontInfo.TextDecorations>
            </mssge:FontInfo>
          </AnnotationLayout.FontInfo>
        </AnnotationLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>