<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/4/2019 3:08:55 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="CSS-NBLAKELY"
  DTS:CreatorName="HAYESSOFT\nblakely"
  DTS:DTSID="{E5380435-0E1A-4053-8C27-6A511810A1DB}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.2000.150"
  DTS:LocaleID="1033"
  DTS:ObjectName="Humble_TIPWebImport"
  DTS:PackageType="5"
  DTS:VersionBuild="21"
  DTS:VersionGUID="{C8C01CD8-1E69-4D7D-8F87-23DCF804998A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DatabaseConnection]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{F417D611-D00E-46F5-A6CC-63EAC002B061}"
      DTS:ObjectName="DatabaseConnection">
      <DTS:PropertyExpression
        DTS:Name="InitialCatalog">@[$Project::DatabaseName]</DTS:PropertyExpression>
      <DTS:PropertyExpression
        DTS:Name="ServerName">@[$Project::DatabaseServer]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=TipWebHostedHumbleisd;Provider=SQLOLEDB.1;Integrated Security=SSPI;Auto Translate=False;Application Name=SSIS-Humble_TIPWebImport-{F417D611-D00E-46F5-A6CC-63EAC002B061}DB.databasename;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Begin SPs"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{6D9FF843-047A-44B0-A69E-56079660A726}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Begin SPs"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{F417D611-D00E-46F5-A6CC-63EAC002B061}"
          SQLTask:SqlStatementSource="SET NOCOUNT ON;&#xA;&#x9;EXEC _ETL_SP00_CatalogInitial;&#xA;&#x9;EXEC _ETL_SP01_CatalogInsertManufacturers;&#xA;&#x9;EXEC _ETL_SP02_CatalogInsertAreas;&#xA;&#x9;EXEC _ETL_SP03_CatalogInsertItemTypes;&#xA;&#x9;EXEC _ETL_SP04_CatalogInsertItems;&#xA;&#x9;EXEC _ETL_SP08_InventoryInsertLocations;&#xA;&#x9;EXEC _ETL_SP09_InventoryInsertStatus;&#xA;&#x9;EXEC _ETL_SP10_InventoryInsertFundingSources;&#xA;&#x9;EXEC _ETL_SP11_InventoryInsertPurchases;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\End SPs"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{e0a0eb41-41f1-423c-adb8-d52148f12b6b}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="End SPs"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{F417D611-D00E-46F5-A6CC-63EAC002B061}"
          SQLTask:SqlStatementSource=" SET NOCOUNT ON;&#xA;&#xA;-- EXEC _ETL_SP13_InventoryUpdateInventory&#xA;&#xA;SET NOCOUNT ON;&#xA;UPDATE _ETL_Inventory&#xA;SET Serial = ''&#xA;WHERE Serial IS NULL&#xA;OR Serial = 'N/A'&#xA;OR Serial = 'NONE'&#xA;OR Serial = 'UNKNOWN'&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = tblTechInventory.InventoryUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.AssetID) = UPPER(tblTechInventory.AssetID)&#xA;WHERE (Tags.InventoryUID IS NULL&#xA;OR Tags.InventoryUID &lt;&gt; tblTechInventory.InventoryUID)&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 15 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE _ETL_Inventory&#xA;&#x9;&#x9;SET InventoryUID = tblTechInventory.InventoryUID&#xA;&#x9;&#x9;FROM _ETL_Inventory AS Tags&#xA;&#x9;&#x9;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;&#x9;&#x9;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET AssetID = Tags.AssetID&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.AssetID IS NULL&#xA;&#x9;END&#xA;&#xA;--InventoryUID set to -1 means Tag already exists in TIPWeb&#xA;UPDATE _ETL_Inventory&#xA;SET InventoryUID = -1&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechInventory ON UPPER(Tags.Tag) = UPPER(tblTechInventory.Tag)&#xA;WHERE Tags.InventoryUID IS NULL&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 6 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Tag = Tags.Tag,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Tag &lt;&gt; Tags.Tag and tags.tag not in (select tag from tblTechInventory)&#xA;&#x9;&#x9;--WHERE TI.Tag &lt;&gt; Tags.Tag&#xA;&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET Serial = Tags.Serial,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.Serial &lt;&gt; Tags.Serial&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 16 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND TI.ItemUID &lt;&gt; Tags.ItemUID&#xA;&#x9;END&#xA;ELSE&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET ItemUID = Tags.ItemUID,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;LEFT JOIN tblTechPurchaseInventory TPI ON TI.InventoryUID = TPI.InventoryUID&#xA;&#x9;&#x9;WHERE Tags.PurchaseUID = 0&#xA;&#x9;&#x9;AND TPI.PurchaseInventoryUID IS NULL&#xA;&#x9;&#x9;AND Tags.ItemUID &gt; 0&#xA;&#x9;&#x9;AND TI.ItemUID = 0&#xA;&#x9;END&#xA;&#xA;IF (SELECT COUNT(*) FROM _ETL_Settings WHERE ETLSettingUID = 18 AND ETLSettingValue = 'True') = 1&#xA;&#x9;BEGIN&#xA;&#x9;&#x9;UPDATE tblTechInventory&#xA;&#x9;&#x9;SET FundingSourceUID = Tags.FundingSourceUID,&#xA;&#x9;&#x9;PurchasePrice = Tags.PurchasePrice, PurchaseDate = Tags.PurchaseDate,&#xA;&#x9;&#x9;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;&#x9;&#x9;FROM tblTechInventory AS TI&#xA;&#x9;&#x9;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;&#x9;&#x9;WHERE TI.FundingSourceUID &lt;&gt; Tags.FundingSourceUID&#xA;&#x9;&#x9;OR TI.PurchasePrice &lt;&gt; Tags.PurchasePrice&#xA;&#x9;&#x9;OR TI.PurchaseDate &lt;&gt; Tags.PurchaseDate&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NULL AND Tags.PurchasePrice IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchasePrice IS NOT NULL AND Tags.PurchasePrice IS NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NULL AND Tags.PurchaseDate IS NOT NULL)&#xA;&#x9;&#x9;OR (TI.PurchaseDate IS NOT NULL AND Tags.PurchaseDate IS NULL)&#xA;&#x9;END&#xA;&#xA;UPDATE tblTechInventory&#xA;SET InventoryTypeUID = Tags.InventoryTypeUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventory AS TI&#xA;JOIN _ETL_Inventory AS Tags ON TI.InventoryUID = Tags.InventoryUID&#xA;WHERE TI.InventoryTypeUID &lt;&gt; Tags.InventoryTypeUID&#xA;&#xA;UPDATE tblTechInventoryHistory&#xA;SET InventoryTypeUID = tblTechInventory.InventoryTypeUID,&#xA;LastModifiedByUserID = 0, LastModifiedDate = GETDATE()&#xA;FROM tblTechInventoryHistory AS TIH&#xA;JOIN tblTechInventory ON TIH.InventoryUID = tblTechInventory.InventoryUID&#xA;WHERE TIH.InventoryTypeUID &lt;&gt; tblTechInventory.InventoryTypeUID&#xA;&#xA;&#xA; EXEC _ETL_SP14_InventoryUpdateInventoryCustom;&#xA; EXEC _ETL_SP15_InventoryInsertInventory;&#xA; EXEC _ETL_SP16_InventoryInsertInventoryCustom;&#xA; EXEC _ETL_SP19_InventoryUpdatePurchaseItemDetails;&#xA; EXEC _ETL_SP20_InventoryInsertPurchaseItemDetails;&#xA; EXEC _ETL_SP22_InventoryUpdatePurchaseItemShipments;&#xA; EXEC _ETL_SP23_InventoryInsertPurchaseItemShipments;&#xA; EXEC _ETL_SP24_InventoryUpdatePurchaseInventory;&#xA; EXEC _ETL_SP25_InventoryInsertPurchaseInventory 1;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Special SP 12"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{15016C6E-EAF5-4131-B092-BA23A8F50884}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Special SP 12"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{F417D611-D00E-46F5-A6CC-63EAC002B061}"
          SQLTask:SqlStatementSource="&#xA;    SET NOCOUNT ON;&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET ItemUID = _ETL_Items.ItemUID&#xA;    FROM _ETL_Inventory AS Tags&#xA;    JOIN _ETL_Items ON UPPER(Tags.Product) = UPPER(_ETL_Items.Product)&#xA;    AND UPPER(ISNULL(Tags.Model, '')) = UPPER(ISNULL(_ETL_Items.Model, ''))&#xA;    AND UPPER(ISNULL(Tags.Manufacturer, '')) = UPPER(ISNULL(_ETL_Items.Manufacturer, ''))&#xA;    AND UPPER(ISNULL(Tags.Area, '')) = UPPER(ISNULL(_ETL_Items.Area, ''))&#xA;    WHERE _ETL_Items.ItemUID &gt; 0&#xA;    AND Tags.Product IS NOT NULL AND Tags.Product &lt;&gt; ''&#xA;    AND Tags.Product &lt;&gt; 'N/A' AND Tags.Product &lt;&gt; 'NONE' AND Tags.Product &lt;&gt; 'UNKNOWN'&#xA;    AND (Tags.ItemUID IS NULL&#xA;    OR Tags.ItemUID &lt;&gt; _ETL_Items.ItemUID)&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET ItemUID = Items.ItemUID&#xA;    FROM _ETL_Inventory AS Tags&#xA;    JOIN (SELECT MIN(ItemUID) AS ItemUID, Product&#xA;    FROM _ETL_Items&#xA;    GROUP BY Product) AS Items&#xA;    ON UPPER(Tags.Product) = UPPER(Items.Product)&#xA;    WHERE Tags.ItemUID IS NULL&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;    FROM _ETL_Inventory AS Tags&#xA;    JOIN (SELECT P.OrderNumber, PID.PurchasePrice, pid.ItemUID,&#xA;&#x9;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;&#x9;GROUP BY P.OrderNumber, PID.PurchasePrice,  pid.ItemUID) AS Purchases&#xA;    ON Tags.PurchasePrice = Purchases.PurchasePrice&#xA;    AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;and tags.ItemUID = purchases.itemuid&#xA;    WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;    OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;    FROM _ETL_Inventory AS Tags&#xA;    JOIN (SELECT P.OrderNumber, I.ItemName, pid.ItemUID,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;&#x9;&#x9;GROUP BY P.OrderNumber, I.ItemName, pid.ItemUID) AS Purchases&#xA;    ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;    AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;&#x9;and tags.ItemUID = purchases.itemuid&#xA;    WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;    OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;    FROM _ETL_Inventory AS Tags&#xA;    JOIN (SELECT P.OrderNumber, I.ItemName, PID.PurchasePrice, pid.ItemUID,&#xA;&#x9;&#x9;MIN(PID.PurchaseItemDetailUID) AS PurchaseItemDetailUID&#xA;&#x9;&#x9;FROM tblTechPurchaseItemDetails PID&#xA;&#x9;&#x9;JOIN tblTechPurchases P ON PID.PurchaseUID = P.PurchaseUID&#xA;&#x9;&#x9;JOIN tblTechItems I ON PID.ItemUID = I.ItemUID&#xA;    GROUP BY P.OrderNumber, I.ItemName, PID.PurchasePrice, pid.ItemUID) AS Purchases&#xA;    ON UPPER(Tags.Product) = UPPER(Purchases.ItemName)&#xA;    AND Tags.PurchaseOrder = Purchases.OrderNumber&#xA;    AND Tags.PurchasePrice = Purchases.PurchasePrice&#xA;&#x9;and tags.ItemUID = purchases.itemuid&#xA;    WHERE (Tags.PurchaseItemDetailUID IS NULL&#xA;    OR Tags.PurchaseItemDetailUID &lt;&gt; Purchases.PurchaseItemDetailUID)&#xA;&#xA;&#xA;UPDATE _ETL_Inventory&#xA;SET ItemUID = Purchases.ItemUID&#xA;FROM _ETL_Inventory AS Tags&#xA;JOIN tblTechPurchaseItemDetails AS Purchases&#xA;ON Tags.PurchaseItemDetailUID = Purchases.PurchaseItemDetailUID&#xA;WHERE Purchases.ItemUID &gt; 0&#xA;AND (Tags.ItemUID IS NULL&#xA;OR Tags.ItemUID &lt;&gt; Purchases.ItemUID)&#xA;&#xA;&#xA;    UPDATE _ETL_Inventory&#xA;    SET ItemUID = 0&#xA;    WHERE ItemUID IS NULL&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{2D0F8B1A-ED03-4494-97D7-BF07A07EAA5C}"
      DTS:From="Package\Begin SPs"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Special SP 12" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{609365A3-DD75-462D-BC3A-D473773998EA}"
      DTS:From="Package\Special SP 12"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\End SPs" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="130,42"
          Id="Package\Begin SPs"
          TopLeft="78,32" />
        <NodeLayout
          Size="122,42"
          Id="Package\End SPs"
          TopLeft="85,188" />
        <NodeLayout
          Size="174,42"
          Id="Package\Special SP 12"
          TopLeft="57,108" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="143.5,74">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="145,150">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38"
              Start="0,0"
              End="0,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>